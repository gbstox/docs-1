[{"title":"Never Gonna Give You Up","type":0,"sectionRef":"#","url":"blog/Welcome","content":"We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you (Ooh, give you up) (Ooh, give you up) (Ooh) Never gonna give, never gonna give (Give you up) (Ooh) Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Welcome to Leaf's Documentation!","type":1,"pageTitle":"Welcome","url":"docs/#welcome-to-leafs-documentation","content":"Developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major food & agriculture brands. Please see the Quickstart section to get started with sample farm data & popular use cases. We have implementation examples in cURL, NodeJS and Python! Getting Started Leaf's API abstracts and standardizes across agricultural data sources so you can focus on building value with farm data. There are just a few concepts that you need to get started and we provide sample data within new Leaf accounts to help you learn quickly. tip Below you'll find instructions using curl and python, and you may also follow along using our Leaf Postman collection. "},{"title":"Authentication","type":0,"sectionRef":"#","url":"docs/authentication","content":"To access our API, you just have to register using this link. After confirming your email, you will be able to request a token (JWT) through this endpoint: Copy https://api.withleaf.io/api/authenticate You will receive your Leaf Token as response. All set! Include this token in your API calls and you will have access to Leaf's API. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }' \\ 'https://api.withleaf.io/api/authenticate' This request will return your access token to Leaf's API: Copy { \"id_token\" : \"YOUR_LEAF_TOKEN\" } note: Your Leaf Token lasts for 30 days with \"rememberMe\": \"true\" in the json. If you want it to last only 24h, feel free to set \"rememberMe\" to \"false\". After expiration, just make the same request to the same endpoint and you will get a new access token. ","keywords":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/converters_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/converters/api This service has the following endpoints available: Copy POST /{input}-{output} POST / "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#endpoints","content":"List of all the available endpoints. "},{"title":"POST /{input}-{output}","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#post-input-output","content":"Posts a file, passed as a multipart to the service. The file will be converted from the format specified in input to the output format. All The valid combinations of input and output are described in this table It is possible to link this conversion with a Leaf User created, passing his ID as a query parameter: leafUserId. But its use is not mandatory. Example# Copy curl -X POST \\ -H 'Content-Type: multipart/form-data' \\ -H 'Accept: application/json' \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' {\"type\":\"formData\"} \\ 'https://api.withleaf.io/services/converters/api/geojson-shapefile?leafUserId=uuid' \\ --form 'file=@path' Response sample: Copy { \"uri\": \"uri to an S3 bucket\", \"message\": \"Success\" } "},{"title":"POST /","type":1,"pageTitle":"Endpoints","url":"docs/converters_endpoints#post-","content":"It performs exactly the same as the previous endpoint, but, instead of passing variables in the path, you pass them via params. Like so: Example# Copy curl -X POST \\ --header 'Content-Type: multipart/form-data' \\ --header 'Accept: application/json' \\ --header 'Authorization: Bearer YOUR_LEAF_TOKEN' {\"type\":\"formData\"} \\ 'https://api.withleaf.io/services/converters/api/?input=geojson&output=shapefile&leafUserId=uuid' \\ --form 'file=@path' This example is equivalent to the example in the previous endpoint. The input and output obey the same rules as well. "},{"title":"Crops","type":0,"sectionRef":"#","url":"docs/crops","content":"Here is a list of all the crops we currently support. The most common are \"corn\" and \"soybeans\". Crop String\"none\" \"alfalfa\" \"barley\" \"edible beans\" \"navy beans\" \"canola\" \"flax\" \"grass seeds\" \"lentils\" \"millet\" \"mustard\" \"oats\" \"black eyed peas\" \"field peas\" \"yellow popcorn\" \"white popcorn\" \"rapeseed\" \"rice long\" \"rice medium\" \"rye\" \"safflower\" \"sorghum\" \"sunflower oil\" \"sunflower stripe\" \"durum wheat\" \"hard red spring wheat\" \"hard red winter wheat\" \"soft red winter wheat\" \"white wheat\" \"chickpeas\" \"lupins\" \"european spring barley\" \"european winter barley\" \"european barley 6\" \"european corn\" \"european oats\" \"european peas\" \"european popcorn\" \"rapeseed e ind\" \"european rye\" \"sunflower e ind\" \"sunflower e oil\" \"european triticale\" \"european wheat feed\" \"european wheat wtr\" \"rapeseed e oil\" \"asparagus\" \"balm\" \"beets\" \"belgian endive\" \"broad beans\" \"broccoli\" \"brussels sprouts\" \"buckwheat\" \"cabbage lettuce\" \"caraway seed\" \"carrots\" \"castor beans\" \"cauliflower\" \"celery\" \"chervil\" \"chicory\" \"chinese cabbage\" \"clover\" \"corn silage\" \"corn cob mix\" \"corn salad\" \"crambe\" \"cucumber\" \"digitalis lanate\" \"dill\" \"elephant grass\" \"endives\" \"english rye grass\" \"evening primrose\" \"field meadow grass\" \"fodder beet\" \"french beans\" \"gherkin\" \"ginseng\" \"grain maize\" \"grass forage\" \"grassland\" \"green cabbage\" \"green peas\" \"hard fescue grass\" \"haricot beans\" \"headed cabbage\" \"hemp\" \"hops\" \"hypericum\" \"iceberg salad\" \"italian rye grass\" \"jerusalem artichoke\" \"kale\" \"leek\" \"lettuce\" \"lucerne\" \"lupine\" \"marowfat peas\" \"melon\" \"mushrooms\" \"onions\" \"oregano\" \"parsley\" \"peanuts\" \"picklers\" \"poppy seed\" \"sweet potatoes\" \"potatoes for chips\" \"potatoes for retail\" \"potatoes for starch\" \"pumpkins\" \"radicchio\" \"raddice\" \"red beet\" \"red cabbage\" \"red fescue grass\" \"red kidney beans\" \"rettich\" \"rhubarb\" \"salad\" \"savoy cabbage\" \"scorzonera\" \"seed potatoes\" \"sesame\" \"shallots\" \"silver onions\" \"spear grass\" \"spinach\" \"strawberries\" \"stubbel tuber\" \"sugarbeet\" \"sugar cane\" \"sugar corn\" \"tankard turnip\" \"tick beans\" \"tobacco\" \"tomatoes\" \"tuber fennel\" \"turnip cabbage\" \"turnip rooted celery\" \"vetch\" \"white beans\" \"white cabbage\" \"wood carrot\" \"set aside\" \"hyracinth\" \"tulip\" \"narcissus\" \"gladiolus\" \"crocus\" \"lily\" \"iris\" \"dahlia\" \"apples\" \"pears\" \"peaches\" \"apricots\" \"melons tree\" \"oranges\" \"lemons\" \"almonds\" \"vines\" \"olives\" \"jalapeno\" \"cantaloupe\" \"honeydew\" \"squash\" \"green beans\" \"lima beans\" \"sweet corn\" \"canary seed\" \"corn\" \"soybeans\" \"cotton\" \"boot stage wcs\" \"energy cane\" \"mung bean\" \"sudangrass\" \"canola polish\" \"mustard gisilba\" \"lentil crimson\" \"lentil eston\" \"lentil chilean\" \"lentil laird\" \"pea trapper\" \"unspecified crop\" \"garlic\" \"rutabaga\" \"macadamia\" \"pecan\" \"walnut\" \"blueberry\" \"cranberry\" \"raspberry\" \"watermelon\" \"orchardgrass\" \"downy bromegrass\" \"smooth bromegrass\" \"reed canary grass\" \"tall fescue\" \"timothy grass\" \"bermuda grass\" \"festulolium\" \"grass clover\" \"grass alfalfa\" \"forage mix\"","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/converters_overview","content":"","keywords":""},{"title":"Available conversions","type":1,"pageTitle":"Overview","url":"docs/converters_overview#available-conversions","content":"We currently have the following conversions available: From\tTogeojson\tshapefile, iso11783, png shapefile\tgeojson trimble\tgeojson cn1\tgeojson datclimate\tgeojson adaptadm\tgeojson "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/field_boundaries_overview","content":"With Leaf, you can import, export, create, and manage Field Boundaries from all major agriculture brands. We provide a quickstart Postman collectionto help you get started. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once per user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect.Get your token and your user's token.Add credentials to Leaf. Now you can opt to connect more companies or Create a Leaf User and attach these credentials so Leaf can represent your user internally and allow you to query for them and their permissioned-data. All set! Leaf automatically detects existing fields in each company's platform. This works together with Leaf's Operations Data. Operations performed in the fields will automatically be bound to the fields you create with Field Boundaries. Leaf uses a Grower/Farm/Field hierarchy to store data. Below please find a breakdown of these concepts and how they relate to one another: Fields are the central concept of this section. Every Field has boundaries which is the geometry that defines its borders.Most Fields are part of a Farm and every Farm can have one or more Fields.Farms can be grouped together under a Grower.A grower (also known as Leaf User) is the data owner entity to which credentials are attached.A Season makes a relation among a Field, a Crop and a start and end dates.Files or Operations are the results of operations in a given Field.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/introduction","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. Use theQuickstart section to help you start accessing sample farm data quickly, easily, and securely. We have implementation examples in cURL, Python and NodeJS! tip Please don't hesitate to contact us to schedule a demo, ask a question, request sample data, or suggest a feature!","keywords":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/operations_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Description\tEndpointsGet all files\tGET /files Get a file\tGET /files/{id} Get a file summary\tGET /files/{id}/summary Get a file's images\tGET /files/{id}/images Get a file's units\tGET /files/{id}/units Upload a file\tPOST /files Merge files\tPOST /files/merge "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#endpoints","content":"Here we list all the available endpoints from this microservice. For easily testing it, we recommend to see our Postman collection. requires Leaf User with credentials To have access to operation files, you will need a Leaf User with valid credentials from the provider you want to access data. If you don't have a Leaf User or you have not connected it with any provider yet, see how to create a Leaf Useror how to add credentials to a Leaf User.  "},{"title":"Get all files","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-all-files","content":" GET /files Gets a paged list of files that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tCNHI, JohnDeere, Trimble, ClimateFieldView or Leaf status\tprocessed, failed or processing origin\tprovider, automerged, merged or uploaded organizationId\tthe provider organizationId (only available for John Deere) createdTime\tISO 8601 date. Returns operations from the createdTime onward operationStartTime\tISO 8601 date. Returns operations from the operationStartTime onward operationEndTime\tISO 8601 date. Returns operations until the operationEndTime operationType\tapplied, planted or harvested minArea\ta number (Double) representing the minimum area (square meters) of the operations to be returned You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files'  "},{"title":"Get a file","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-a-file","content":" GET /files/{id} Gets a single file by its id. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}'  "},{"title":"Get a file summary","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-a-file-summary","content":" GET /files/{id}/summary Gets the summary, if available, for the file id. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary'  "},{"title":"Get a file's images","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-a-files-images","content":" GET /files/{id}/images Gets a list of PNG images generated from the operation's file properties. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images'  "},{"title":"Get a file's units","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#get-a-files-units","content":" GET /files/{id}/units Gets the file's properties and their units. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/units'  "},{"title":"Upload a file","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#upload-a-file","content":" POST /files Posts/creates a new file in Leaf. The file must be sent as a zip. This endpoint receives three query parameters, one of them is optional. A leafUserId, provider and fileFormat (optional). When you are sure which provider a file came from and that if there are multiple files they belong to the same operations, you can add the fileFormat, that must be one of the following: Copy ADAPTADM CN1 DATCLIMATE GEOJSON ISO11783 SHAPEFILE TRIMBLE Along with the fileFormat, a provider must be set and be one of the following: Copy Leaf ClimateFieldView CNHI JohnDeere Trimble When unsure about the format or there can be more than one format in the same zip, you can use our generic uploader and Leaf will detect the files present. For that, set provider to Leaf and don't include fileFormat. Leaf will detect files present in a number of different ways and hierarchies and create/return one file id for each detection. This is very important because it's slightly different than when uploading a zip file you are sure refers to the same operation and same provider, creating only one file even if the zip contains multiple files for the same operation cURLPythonJavaScriptJSON Response Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=shapefile.zip' \\ 'https://api.withleaf.io/services/operations/api/files?' \\ 'fileFormat=SHAPEFILE&provider=JohnDeere&leafUserId=id' After a few minutes, you can query each of the files individually onGet a File or all of them, filtering by createdDate onGet all Files  "},{"title":"Merge files","type":1,"pageTitle":"Endpoints","url":"docs/operations_endpoints#merge-files","content":" POST /files/merge Posts a merge operation to our server. A merge operation is performed asynchronously. This call will return immediately with the newly created file entry, but at this point, the file is not already processed and available. You will need to make a new GET /files request for the new id and check the status. A status value of processed means the file is done merging. A merge process has some validations, the files passed must belong to the same leafUserId, be of the same operation type and have the status as processed. If any of those filters fail, the endpoint will result in HTTP 400 error. It receives a single JSON object with the ids entry. Example: Copy { \"ids\": [ \"id1\", \"id2\", \"so on\" ] } cURLPythonJavaScriptJSON Response Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"ids\": [ \"id1\", \"id2\" ] }' 'https://api.withleaf.io/services/operations/api/files/merge' "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundaries_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#about","content":"Here we list all the available endpoints from Fields API. For easily calling them, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/fields/api There is a REST resources section if you want to check it out. This service has the following endpoints available: Description\tEndpointsGet all fields\tGET /fields Get a field\tGET /users/{id}/fields/{id} Create a field\tPOST /users/{id}/fields Get all operations of a field\tGET /users/{id}/fields/{id}/operations Get an operation of a field\tGET /users/{id}/fields/{id}/operations/{id} Get fields by geometry\tPOST /fields/query/intersects Get intersection of fields\tPOST /users/{id}/fields/intersect Delete a field\tDELETE /users/{id}/fields/{id} Get all farms\tGET /farms Get a farm\tGET /users/{id}/farms/{id} Get all growers\tGET /growers Get a grower\tGET /growers/{id} "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#endpoints","content":""},{"title":"Get all fields","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-all-fields","content":" GET /fields Gets a paged list of Fields. It is possible to filter the results by passing some query parameters. leafUserId, only matches files from this user (string).page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) These last two parameters are used exclusively for paging through results. Response# A JSON array containing Fields. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields' "},{"title":"Get a field","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-a-field","content":" GET /users/{id}/fields/{id} Gets a single Field by its id. Response# A single Field as a JSON object. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}' "},{"title":"Create a field","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#create-a-field","content":" POST /users/{id}/fields Creates a Field for the user leafUserId. A resquest body must be provided containing the an entry \"geometry\", which represents the boundaries of the Field being created as a GeoJSON geometry (it must be a \"MultiPolygon\"). The entry \"id\" is optional. If no id is provided, an UUID will be generated. The Field id CAN NOT be updated. Request body example: Copy { \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] } } Response# A Field as a JSON object. cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"geometry\": [...] } }' 'https://api.withleaf.io/services/fields/api/fields/users/{leafUserId}/{id}' "},{"title":"Get all operations of a field","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-all-operations-of-a-field","content":" GET /users/{id}/fields/{id}/operations Gets a paged list of all operation files of the Field and Leaf User specified in the URL. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tType\tDescriptionoperationType\tString \"harvested\", \"planted\", \"applied\" or \"other\"\tretrieve operations of given type provider\tString \"CNHI\", \"JohnDeere\", \"Trimble\" or \"ClimateFieldView\"\tretrieve operations of given provider origin\tString \"provider\", \"automerged\", \"merged\" or \"uploaded\"\tretrieve operations of given origin crop\tString name of the crop, like \"corn\" or \"soybeans\". Entire crop list available here\tretrieve operations with this crop. startTime\tISO 8601 datetime format\tretrieve operations that started after this date endTime\tISO 8601 datetime format\tretrieve operations that ended before this date You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) Response# A JSON array of Files. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations' "},{"title":"Get an operation of a field","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-an-operation-of-a-field","content":" GET /users/{id}/fields/{id}/operations/{id} Gets a single Operation File of a field by its id. Response# A single Operation File. JavaScriptPythoncURL Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/{id}' "},{"title":"Get Fields by geometry","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-fields-by-geometry","content":" POST /fields/query/intersects Gets a list of fields that intersect with the GeoJSON MultiPolygon sent in the request body. Response# A JSON list of Fields. cURLPythonJavaScriptJSON sample response Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"geometry\": [...] } }' 'https://api.withleaf.io/services/fields/api/fields/query/intersects' "},{"title":"Get intersection of fields","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-intersection-of-fields","content":" POST /users/{id}/fields/intersect Gets a GeoJSON MultiPolygon corresponding to the intersection of the Fields specified by the given id's. Such Field id's goes in a list, in the request body. Response# A JSON in the format of a GeoJSON geometry. cURLPythonJavaScriptJSON sample response Copy curl --location --request \\ POST 'https://api.withleaf.io/services/fields/api/users/{id}/fields/intersect' \\ --header 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ --header 'Content-Type: application/json' \\ --data-raw '[\"id1\", \"id2\"]' "},{"title":"Delete a field","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#delete-a-field","content":" DELETE /users/{id}/fields/{id} Deletes the field with the given id. "},{"title":"Get all farms","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-all-farms","content":" GET /farms Gets a paged list of all Farms. It is possible to pass some query parameters. provider, only matches Farms from this provider (string)leafUserId, only matches Farms from this Leaf User (UUID)page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) The parameters are used exclusively for paging through results. Response# A JSON array containing Farms. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/farms' "},{"title":"Get a farm","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-a-farm","content":" GET /users/{id}/farms/{id} Gets a single Farm by its id. Response# A single Farm as a JSON object. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}' "},{"title":"Get all growers","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-all-growers","content":" GET /growers Gets a paged list of all Growers. Use the following parameters for paging through results. provider, only matches Growers from this provider (string)leafUserId, only matches Growers from this Leaf User (UUID)page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) Response# A JSON array containing Growers. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/growers' "},{"title":"Get a grower","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#get-a-grower","content":" GET /growers/{id} Gets a single Grower by its id. Response# A single Grower as a JSON object. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/growers/{id}' "},{"title":"REST Resources","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#rest-resources","content":"See below the REST resources and their endpoints. "},{"title":"Field Resource","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#field-resource","content":"Copy { \"id\": \"UUID\", \"providerName\": \"str\", \"providerFieldName\": \"str\", \"providerFieldId\": \"str\", \"providerFieldName\": \"str\", \"providerBoundaryId\": \"UUID\", \"type\": \"ORIGINAL\", \"leafUserId\": \"UUID\", \"organizationId\": \"str\", \"mergedFieldId\": [\"UUID\"], \"files\": [\"UUID\"], \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] }, } Description\tEndpointsGet all fields\tGET /fields Get a field\tGET /users/{id}/fields/{id} Create a field\tPOST /users/{id}/fields Get fields by geometry\tPOST /fields/query/intersects Get intersection of fields\tPOST /users/{id}/fields/intersect Delete a field\tDELETE /users/{id}/fields/{id} "},{"title":"Operation Resource","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#operation-resource","content":"Copy { \"id\": \"UUID\", \"operationType\": \"harvested|planted|applied\", \"startTime\": \"ISO date-time\", \"endTime\": \"ISO date-time\", \"crops\": [\"str\"], \"varieties\": [\"str\"], \"providerFileId\": \"str\", \"provider\": \"Trimble\", \"origin\": \"provider|merged|automerged|uploaded\", \"leafUserId\": \"UUID\" } Description\tEndpointsGet all operations of a field\tGET /users/{id}/fields/{id}/operations Get an operation of a field\tGET /users/{id}/fields/{id}/operations/{id} "},{"title":"Farm Resource","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#farm-resource","content":"Copy { \"id\": \"long\", \"name\": \"str\", \"providerName\": \"str\", \"providerFarmName\": \"str\", \"providerFarmId\": \"UUID\", \"leafUserId\": \"UUID\", \"growerId\": \"long\", \"fieldIds\": [\"UUID\"] } Description\tEndpointsGet all farms\tGET /farms Get a farm\tGET /users/{id}/farms/{id} "},{"title":"Grower Resource","type":1,"pageTitle":"Endpoints","url":"docs/field_boundaries_endpoints#grower-resource","content":"Copy { \"id\": 2345, \"leafUserId\": \"UUID\", \"providerName\": \"str\", \"providerOrganizationId\": \"str\", \"providerCompanyId\": \"str\", \"providerUserId\": \"str\", \"providerGrowerId\": \"str\", \"farmIds\": [4534] } Description\tEndpointsGet all growers\tGET /growers Get a grower\tGET /growers/{id} "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/operations_overview","content":"Leaf's Operation Data API returns clean, aggregated, and standardized data from all major machine data brands in a simple JSON response. You can access user users' permissoned-files in two ways Connecting to the company that holds your users' files. Our Operation Data Service will immediately pool machine data from the authorized account and monitor new files to keep them updated Uploading the files directly to Leaf. requires Leaf User You will need a Leaf User to retrieve operations images, summary, and standardized files. You can add files by having a Leaf User with valid credentials from the provider you want to access data or you can upload data manually. If you don't have a Leaf User or you have not connected it with any provider yet, see how to create a Leaf User andhow to add credentials to a Leaf User. All files will be passed through a processing chain that includes: Converting raw proprietary format files to a rawGeoJSON;Standardizing the rawGeoJSON to a standardGeojson;Creating images for all the numerical attributes in the file;Creating a summary of the file with summary information, such as averages, standard deviations, maximum and minimum values ​​for important properties, and more. This processing may take a few minutes to complete and happens continuously in the background. Since one single operation can be represented in several (sometimes hundreds of) files by the provider, this service also provides an auto-merge feature, which will identify files that belong to the same operation (planting, for example) and same field and automatically merge them. Alternatively, it is possible to manually upload files to be processed and merge them manually if desired. Please keep in mind that merging files is processing-heavy and may take about 20 minutes to finish. Leaf can process any files you send from the following companies: John DeereClimate FieldViewCNHiTrimble File processing We are always improving how we process files. If you have any doubts or suggestions, we will be happy to help at help@withleaf.io We also provide our Leaf Postman collection so you can follow along easily.","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/operations_postman","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Overview","url":"docs/operations_postman#overview","content":"Leaf's Operation Data API returns aggregated, cleaned, and standardized data from all major machine data brands in a simple JSON response. This tutorial will walk through how to create a Leaf user, securely authenticate with their chosen platforms, and receive auto-updating data from all of them with a single request. We also provide a quickstart Postman collection so you can follow along easily. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once for each user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect toGet yours and your user's tokensAdd credentials to Leaf Now you can opt to connect to more companies or Create a Leaf User and attach these credentials, so that Leaf can represent your user internally and you can query specifically for them and their data. All set! Leaf automatically detects and starts processing new files. You can access in \"Get Operation Files\". "},{"title":"Roadmap","type":1,"pageTitle":"Overview","url":"docs/operations_postman#roadmap","content":"Today, you can to connect to these companies: John Deere (Medium)Climate FieldView (Medium)CNHiTrimble Coming in the third quarter of 2020: RavenAGCO Coming in the fourth quarter of 2020: AgLeaderStara "},{"title":"John Deere","type":1,"pageTitle":"Overview","url":"docs/operations_postman#john-deere","content":"This section will show you how you can integrate Leaf's API with you John Deere account and start using our operations service. Grab our quickstartPostman collection and follow along! 1. Get John Deere auth URL# In Step 1 we will be generating tokens from John Deere. The goal In step 2 is we will get our John Deere token_id and token_secret. Token Verifier# In step 1 we will get a temporary \"token verifier\" from John Deere that confirms an user’s authentication of your application to access their John Deere data and generate credentials. We get that verifier by going through their authentication flow (OAuth2). Before generating the authentication URL, please: Update current value of jd_client_key to your app's client key on John DeereUpdate current value of jd_client_secret to your app's client secret on John DeereUpdate current value of jd_callback_url to your app's callback_url on John Deere Then, to generate the authentication URL your application will send to your user so they can authorize access to their account files you can use the included step 2 in the Postman Collection. Change client_key and client_ secretvariables to yours received from John Deere when you created an app on your developer account with them and redirect_uri to a uri the \"token verifier\" will be sent after the user authorizes your application. Hit Send. Redirect your user to the url included in the response. They will authenticate and be redirected to the redirect_url. Copy the entire url you were redirected to. It looks like: Copy https://leafagriculture.com.br/?oauth_token=TOKEN&oauth_verifier=CODE Paste it in the environment variable jd_response_url. 2. Get John Deere Tokens# After updating the jd_response_url in Postman you can submit your credentials and receive your tokens. Hit Send token_id and token_secret_key will be automatically transferred tojd_token_id and jd_token_secret environment variables and will be used in the next step. 3. Add John Deere credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s John Deere data. We first add the John Deere credentials to Leaf API. Hit Send All the info needed has already been filled automatically in Step 2. An id for the credentials you just created will be returned. This id will be automatically transferred to the value of jd_credentials_id to be used in the next step. "},{"title":"Climate Field View","type":1,"pageTitle":"Overview","url":"docs/operations_postman#climate-field-view","content":"Grab our quickstart Postman collection and follow along! 1. Get Climate Field View auth URL# We will be generating a url to redirect your user to authenticate with Climate. Update environment variables cfv_client_id and cfv_client_secret to your Climate Field View developer account credentials. Update environment variable cfv_redirect_url to your application's backend Redirect your user to the script's output url. They will authenticate and be redirected to the redirect_uri. A code will be sent to that cfv_redirect_url. We will need this code Step 2. Copy the code value. note: this code expires after 1 minute. Paste code value to environment variable cfv_code 2. Get Climate Field View tokens# Hit \"Send\" A lot of information will be returned. The important ones are access_tokenand refresh_token. These will be automatically transferred tocfv_access_token and cfv_refresh_token environment variables and will be used in the next step. 3. Add Climate Field View credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s Climate data. We first add the Climate credentials to Leaf API, to do that: Hit \"Send\" An id for the credentials you just created will be returned. This id will be automatically transferred to the value of cfv_credentials_id to be used in the next step. "},{"title":"Leaf User","type":1,"pageTitle":"Overview","url":"docs/operations_postman#leaf-user","content":"Create Leaf User# Now we have to attach credentials to a Leaf User. To do so, we can create a Leaf user and attach our John Deere and/or Climate Field View credentials via the credentials id. We can also attach credentials from other companies to this same user to query all available data by Grower/Farm/Field regardless of brand. Update (optional) fields \"address\", \"email\", \"name\" and \"phone\" with your user's information. We have automatically included our jd_credentials_id to this call and attached it to this user. Hit \"Send\" Along with other information returned, there is an \"id\". This \"id\" is theleaf_user_id that will be used in the next (final) Step to query and access files. Update Leaf User# To update a Leaf User, let's say to add another provider credentials or change the user's address, we can use this PUT request. Since this method overwrites, remember to send all the user's information along with the information you want to add or update. For example, if you want to add John Deere credentials to a user that already has ClimateFieldView credentials, remember to specify both credentials ids. Get specific Leaf User# Get specific Leaf User With this endpoint you can query all information on a specific Leaf User, such as their address, email, credentials, etc. To do so, update the value of the environment variable leaf_user_id to the Leaf User id you want to query. Gel all Leaf Users# Get all Leaf Users With this endpoint you can query all information on all your Leaf Users, such as their address, email, credentials, etc. Just hit 'send'. "},{"title":"Query Operations by Field","type":1,"pageTitle":"Overview","url":"docs/operations_postman#query-operations-by-field","content":"To query all operations that happened in a specific field (step 2), we first need to create that field (step 1). Then, Leaf will automatically detect operations of that field based on the operations' and on the field's coordinates. This process usually takes about 30 minutes. 1. Create Field# Here we need to specify a leafUserId (that will be the Leaf User owner of that field), a externalId (that will be the name we give to the field) and the geojson geometry of the field (location). After creating the field we can query it (step 2) 2. Get operations' ids by Field# To query all operations that happened in a specific field, just update the environment variable field_external_id to the field id you want to query files. "},{"title":"Merge Operation Files","type":1,"pageTitle":"Overview","url":"docs/operations_postman#merge-operation-files","content":"1. Merge files# Merging files with Leaf is a very simple process. You just have to list, in the request json body, the ids of the files you want to merge. Make sure the operations are of the same type (APPLIED or HARVESTED or PLANTED), so the results are consistent. After that, just hit \"send\" and an id for that merged file will be returned. You can query that file as any other. It will be listed when you query for all files and can also be queried specifically by its id 2. Query & access specific file# You can query a merged file as any other. It will be listed when you query for all files and can also be queried specifically by its id. So this request is the same as seen on \"Get Operation Files\". You just have to update the environment variable \"id\" to the id of the merged file. Keep in mind that merging files is processing-heavy and may take about 20 minutes to finish. "},{"title":"Quickstart","type":0,"sectionRef":"#","url":"docs/quickstart","content":"","keywords":""},{"title":"Leaf Quickstart","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#leaf-quickstart","content":"This quickstart tutorial is written help you quickly experience and start building with Leaf. First, please register on our website to receive your credentials. We've included sample data in your account so you can begin querying data via Leaf immediately. Leaf's Postman collection Below you'll find instructions using curl and python, and we've also built a Postman collection to accompany this tutorial. Please find it here: Leaf Postman collection "},{"title":"Authentication","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#authentication","content":"After creating and confirming your account, the first step is to authenticate with your email and password to retrieve a Leaf token. This token is what we'll use in subsequent steps to talk to the API. Be sure to keep a copy of this token for the remaining steps. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }' \\ 'https://api.withleaf.io/api/authenticate' note: Your Leaf Token lasts for 30 days with \"rememberMe\": \"true\" in the json. If you want it to last only 24h, feel free to set \"rememberMe\" to \"false\". After expiration, just make the same request to the same endpoint and you will get a new access token.  "},{"title":"Get sample Field with attached operations","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-field-with-attached-operations","content":"Inside your account, we've created a sample LeafUser and populated it with data. Let's take a look at the fields endpoint to see the sample field: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields' It returns a JSON object representing the Fields and you can see that there are operations ids attached. Next section will explain how to get the operations by those ids. "},{"title":"Get all sample operation files","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-all-sample-operation-files","content":"Next, let's look at operations data. 'Operations' refers to the data collected when a machine and any implements performed an operation on a farm. This command will list operations files available across your whole account: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files' "},{"title":"Get specific sample operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-specific-sample-operation-file","content":"Now that you have a file ID, you can query for the operations data itself and a summary as well. cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}' "},{"title":"Get sample operation file summary","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-summary","content":"cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary' "},{"title":"Get sample operation file image","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-image","content":"You may have already noticed that we're seeing a lot of operations files for this one field and the timestamps span just a few days. This is because we're looking at multiple files output from a machine that effectively represent one large operation - a harvest. Before we talk about merging these pieces into a single operation, let's look at an image from one of the pieces: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample merged operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-merged-operation-file","content":"A single strip appears in that image which is no mistake. It's also not as useful as seeing the whole operation across the whole field! To solve this, we allow you to request a merge of operations data and produce images for data of the same type and timeframe. The sample data already includes a merged file. Let's take a look at that merged harvesting image which is colored to indicate the range of wet mass collected. First, let's find the merged file by simply adding a parameter to filter to origin=merged cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files?origin=merged' And finally, use that file ID to retrieve a list of images, one for each operation property. From this response, you can load one of the sample images: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample satellite imagery","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-satellite-imagery","content":"Finally, let's take a look at some satellite imagery. Using data from Sentinel-2, we produce NDVI images for fields you define to be monitored. First we'll list the fields being monitored from the satellite service: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/' And then we can pull up the sample NDVI image of the sample field like this: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{field_id}/processes' "},{"title":"Sample responses","type":0,"sectionRef":"#","url":"docs/operations_sample_output","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Sample responses","url":"docs/operations_sample_output#overview","content":"You can always check the JSON Response tab on each of our documented endpoints, but here is a more detailed list of sample outputs. "},{"title":"Operations JSON sample","type":1,"pageTitle":"Sample responses","url":"docs/operations_sample_output#operations-json-sample","content":"You can move through the three tabs below to see a sample of how Leaf returns each of the operation types. PlantedAppliedHarvest Copy { \"id\": \"7481ddef-aeeb-430f-b076-2c40da1118b0\", \"provider\": \"ClimateFieldView\", \"sizeInBytes\": 1014992, \"originalFile\": \"https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/2fc02897-3d22-4a6d-be27-5cff467f3c2b.zip\", \"rawGeojson\": \"https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/10618be7-067d-46b2-9910-31b24f7d447e.json\", \"standardGeojson\": \"https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/77f136ae-d126-4a43-b742-4735fd98cd15.json\", \"leafUserId\": \"1f351aa6-c05a-473a-89ba-d63a87d9b302\", \"apiOwnerUsername\": \"leafdemos\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"totalDistance\": 16332.22799257624, \"speed\": { \"average\": 4.971254464285714, \"standardDeviation\": 1.8614336338617365, \"min\": 0.0, \"max\": 22.375 }, \"elevation\": { \"average\": 198.52098214285715, \"standardDeviation\": 0.5825870746480669, \"min\": 197.9, \"max\": 199.8 }, \"varieties\": [ \"a6499\" ], \"crop\": [ \"corn\" ], \"seedRateActual\": { \"average\": 36848.14630850318, \"standardDeviation\": 239.58622953371074, \"min\": 36120.90909090909, \"max\": 37332.5 }, \"operationType\": \"planted\", \"totalArea\": 789722.596123788, \"machineSpecification\": { \"machineDescription\": \"Case IH MX255 Tractor\", \"implementDescription\": \"CNH 40.0' 24 Row Planter\", \"implementWidth\": 40 } }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ -89.81542008016667, 39.70494972116667, 198.3 ], [ -89.83448664183334, 39.71958522833334, 199.4 ], [ -89.83448667233333, 39.719585982, 199.4 ], [ -89.834561782, 39.72639424783333, 198.4 ], [ -89.83391027566668, 39.7265945855, 198.2 ], [ -89.83377310816668, 39.72662854166666, 198.1 ], [ -89.83370422316666, 39.72664485916666, 198.1 ], [ -89.83366982933333, 39.726652982666664, 198.1 ], [ -89.83363526666666, 39.72665951133333, 198.1 ], [ -89.83356540233332, 39.7266725425, 198.0 ], [ -89.83353063066667, 39.726679017833334, 198.0 ], [ -89.83349588133333, 39.72668446683333, 198.0 ], [ -89.833460171, 39.72668880933334, 198.0 ], [ -89.8334243805, 39.7266923895, 198.0 ], [ -89.83339248400002, 39.72669496983334, 198.0 ], [ -89.83333600250002, 39.72669921166666, 198.0 ], [ -89.83330866400001, 39.72670107416666, 198.0 ], [ -89.83317310533333, 39.72670451, 198.0 ], [ -89.83314757666668, 39.72670436233333, 198.0 ], [ -89.83312376633333, 39.72669795683333, 198.0 ], [ -89.83310413883333, 39.726685550166664, 198.0 ], [ -89.81542008016667, 39.70494972116667, 198.3 ] ] ] ] } }, \"sourceFiles\": [], \"status\": \"processed\", \"origin\": \"provider\", \"createdTime\": \"2020-10-29T19:46:18.889\", \"operationStartTime\": \"2019-05-18T16:25:19\", \"operationEndTime\": \"2019-05-18T17:45:06\" } "},{"title":"Sample Operation Files","type":0,"sectionRef":"#","url":"docs/samplefiles","content":"PlantedAppliedHarvest Copy { \"id\": \"7481ddef-aeeb-430f-b076-2c40da1118b0\", \"provider\": \"ClimateFieldView\", \"sizeInBytes\": 1014992, \"originalFile\": \"https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/2fc02897-3d22-4a6d-be27-5cff467f3c2b.zip\", \"rawGeojson\": \"https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/10618be7-067d-46b2-9910-31b24f7d447e.json\", \"standardGeojson\": \"https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/77f136ae-d126-4a43-b742-4735fd98cd15.json\", \"leafUserId\": \"1f351aa6-c05a-473a-89ba-d63a87d9b302\", \"apiOwnerUsername\": \"leafdemos\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"totalDistance\": 16332.22799257624, \"speed\": { \"average\": 4.971254464285714, \"standardDeviation\": 1.8614336338617365, \"min\": 0.0, \"max\": 22.375 }, \"elevation\": { \"average\": 198.52098214285715, \"standardDeviation\": 0.5825870746480669, \"min\": 197.9, \"max\": 199.8 }, \"varieties\": [ \"a6499\" ], \"crop\": [ \"corn\" ], \"seedRateActual\": { \"average\": 36848.14630850318, \"standardDeviation\": 239.58622953371074, \"min\": 36120.90909090909, \"max\": 37332.5 }, \"operationType\": \"planted\", \"totalArea\": 789722.596123788, \"machineSpecification\": { \"machineDescription\": \"Case IH MX255 Tractor\", \"implementDescription\": \"CNH 40.0' 24 Row Planter\", \"implementWidth\": 40 } }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ -89.81542008016667, 39.70494972116667, 198.3 ], [ -89.83448664183334, 39.71958522833334, 199.4 ], [ -89.83448667233333, 39.719585982, 199.4 ], [ -89.834561782, 39.72639424783333, 198.4 ], [ -89.83391027566668, 39.7265945855, 198.2 ], [ -89.83377310816668, 39.72662854166666, 198.1 ], [ -89.83370422316666, 39.72664485916666, 198.1 ], [ -89.83366982933333, 39.726652982666664, 198.1 ], [ -89.83363526666666, 39.72665951133333, 198.1 ], [ -89.83356540233332, 39.7266725425, 198.0 ], [ -89.83353063066667, 39.726679017833334, 198.0 ], [ -89.83349588133333, 39.72668446683333, 198.0 ], [ -89.833460171, 39.72668880933334, 198.0 ], [ -89.8334243805, 39.7266923895, 198.0 ], [ -89.83339248400002, 39.72669496983334, 198.0 ], [ -89.83333600250002, 39.72669921166666, 198.0 ], [ -89.83330866400001, 39.72670107416666, 198.0 ], [ -89.83317310533333, 39.72670451, 198.0 ], [ -89.83314757666668, 39.72670436233333, 198.0 ], [ -89.83312376633333, 39.72669795683333, 198.0 ], [ -89.83310413883333, 39.726685550166664, 198.0 ], [ -89.81542008016667, 39.70494972116667, 198.3 ] ] ] ] } }, \"sourceFiles\": [], \"status\": \"processed\", \"origin\": \"provider\", \"createdTime\": \"2020-10-29T19:46:18.889\", \"operationStartTime\": \"2019-05-18T16:25:19\", \"operationEndTime\": \"2019-05-18T17:45:06\" }","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/satellite_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Overview","url":"docs/satellite_overview#about","content":"Using Leaf's Satellite service you will be able to easily implement a satellite imagery application and compare the field health evolution over time. Leaf's service uses Sentinel-2 data which has the highest resolution publicly available and revisits each field every 3 to 5 days. You can get historical images with Leaf. By default, Leaf retrieves images from 30 days prior to the creation of your field. But you can increase that to as far back in time as you want.Here's how  This API accepts field boundary polygons and returns processed, cropped, and color-corrected RGB and NDVI images every time there is a new image available. We also provide information like percent cloud coverage of the field, the data coverage percentage, and the Sentinel tile source for each image as well. We generate a total of 19 images for each intersected field: A GeoTiff for each band from Sentinel and processed RGB and NDVI images. The following table shows all the images with its resolutions and types: (TIFs are EPSG:4326, PNGs are EPSG:3857). Name\tResolution\tType\tProjectionNDVI.png\tNULL\tpng ndvi\tEPSG:3857 RGB.png\tNULL\tpng RGB\tEPSG:3857 NDVI.tif\t10\ttif raw ndvi values\tEPSG:4326 NDVI_color.tif\t10\ttif colored ndvi\tEPSG:4326 RGB.tif\t10\ttif RGB\tEPSG:4326 B01.tif\t60 meters\tsingle band\tEPSG:4326 B02.tif\t10\tsingle band\tEPSG:4326 B03.tif\t10\tsingle band\tEPSG:4326 B04.tif\t10\tsingle band\tEPSG:4326 B05.tif\t20\tsingle band\tEPSG:4326 B06.tif\t20\tsingle band\tEPSG:4326 B07.tif\t20\tsingle band\tEPSG:4326 B08.tif\t10\tsingle band\tEPSG:4326 B8A.tif\t20\tsingle band\tEPSG:4326 B09.tif\t60\tsingle band\tEPSG:4326 B11.tif\t20\tsingle band\tEPSG:4326 B12.tif\t20\tsingle band\tEPSG:4326 NDVI_relative.png\tNULL\tpng relative ndvi\tEPSG:3857 NDVI_absolute.png\tNULL\tpng absolute ndvi\tEPSG:3857 PNG files do not have resolution because they are scaled up by 800%. We generate a colorized NDVI_color.tif using a custom-built color ramp. See the image below. If you prefer to use your own ramp, we recommend using NDVI.tif, which is a pre calculated NDVI file. You can import it into any GIS software, like QGis, and use it as you please. In addition, you will get the NDVI (i.e., we call them at Leaf as NDVI_relative.png, NDVI_absolute.png and NDVI.png) cut for your area of interest. The NDVI relative uses the minimum and maximum of the image of that date and, therefore, you would have a color scale to better visualize the differences of your harvest for that specific moment, whereas, the NDVI absolute and NDVI, whose range goes from -1 to 1, you can make comparisons on different dates, the difference between these files are the color ramp applied (i.e., in the NDVI all the values below 0 are bright red while in the NDVI absolute the color ramp begins at -1 as the bright red and the value 1 as the bright green inteporlated in between).  Left - NDVI relative. Center - NDVI absolute. Right - NDVI. We recommend using the Right one (just ndvi.png) Currently, our Satellite service runs without a relationship between our Field Services, and the User Management Services. However, we are working to integrate it into the leafUser hierarchy, and the Fields Service. See the Satellite API Reference for more information. "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/satellite_endpoints","content":"","keywords":""},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#endpoints","content":""},{"title":"Get all satellite fields","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-all-satellite-fields","content":" GET /fields Returns paged results for all fields registered. It returns a list of JSON objects like so: Copy [ { \"externalId\": \"your field id\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] } }, # etc... ] externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields'  "},{"title":"Get a satellite field","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-a-satellite-field","content":" GET /fields/{id} Fetches a field entry based on its external id. It returns a single JSON object with the following entries (like each item fromGET /fields results): Copy { \"externalId\": \"your field id\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] } } id: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID'  "},{"title":"Get images of satellite field","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#get-images-of-satellite-field","content":" GET /fields/{id}/processes Returns images for a given field id. We return the following images, (tifs are EPSG:4326, pngs are EPSG:3857): RGB as tiff and as png (10m resolution)Colorized NDVI as tiff and as png (10m resolution)Raw NDVI as tiff (10m resolution)all 12 Sentinel-2 bands as tiff. It is possible to filter the results by a number of different parameters: Parameter\tType\tDescription\tDefaultstartDate\tISO 8601 datetime format\tretrieve images taken after this day\t- endDate\tISO 8601 datetime format\tretrieve images taken until this day\t- startProcessedTimestamp\tISO 8601 datetime format\tretrieve images processed by Leaf after this day\t- endProcessedTimestamp\tISO 8601 datetime format\tretrieve images processed by Leaf until this day\t- maxClouds\tdouble between 0.0 and 100.0\tfilter processes with less than or equal to this percentage\t100 status\tstring \"SUCCESS\", \"FAILED\" or \"STARTED\"\tretrieve images with selected status\tSUCCESS page\tinteger\tpage being fetched\t0 size\tinteger\thow many processes (sets of all images) to return per page\t20 Important Default page is page 0 and default size is 20. So, to see more images, you can either increase the size or the page number. cURLPythonJavaScriptJSON Response Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID/processes?startDate=2020-06-03&endDate=2020-06-10'  "},{"title":"Create a satellite field","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#create-a-satellite-field","content":" POST /fields Creates a new field It will be continuously monitored forever, and new images will arrive every ~5 days (time it takes for the satellite to go over the same field when orbiting the Earth). If you don't need the field anymore, you candelete the field. Note By default, Leaf will return images for your field from the last 30 days (from the moment you create the field). You can change that by including a \"startDate\" or a \"daysBefore\" to the body There are two ways you can do that: set a startDate (ISO, \"yyyy-mm-dd\") meaning Leaf will return all images for your field since this date. set how many daysBefore (an integer greater than or equal to 0) you want to get images from. Note that they are both optional, but you can not specify both. Now let's see the Payload Payload# The payload of this object should be like the following: Copy { \"externalId\": \"your field id\", \"startDate\": \"2019-01-01\" \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] } } externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ your payload }' \\ 'https://api.withleaf.io/services/satellite/api/fields' field size limit the field cannot be larger than 50k hectares (123k acres) andcannot have a perimeter bigger than 300km (180 miles).  "},{"title":"Delete a satellite field","type":1,"pageTitle":"Endpoints","url":"docs/satellite_endpoints#delete-a-satellite-field","content":" DELETE /fields/{id} Deletes the field from our database. warning Note that the field deletion is irreversible and all images will be lost. (But you can always create a new field and get images from the past, as far as you want). cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/YOUR_ID' "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/user_management_overview","content":"","keywords":""},{"title":"Integrate with John Deere","type":1,"pageTitle":"Overview","url":"docs/user_management_overview#integrate-with-john-deere","content":"We made this very easy on one of our blog posts. Check our blog post on John Deere authentication with Leaf "},{"title":"Integrate with Climate Field View","type":1,"pageTitle":"Overview","url":"docs/user_management_overview#integrate-with-climate-field-view","content":"We made this very easy on one of our blog posts. Check our blog Post on Climate Field View authentication with Leaf "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/user_management_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/usermanagement/api See below the REST resources and their endpoints available in this service. Leaf Users Resources# Form of a Leaf User resource: Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", \"somarCredentials\": {\"Object\"}, \"trimbleCredentials\": {\"Object\"}, \"cnhiCredentials\": {\"Object\"}, \"johnDeereCredentials\": {\"Object\"}, \"ravenCredentials\": {\"Object\"}, \"climatempoCredentials\": {\"Object\"}, \"climateFieldViewCredentials\": {\"Object\"} } Endpoints: Copy GET /users/{id} GET /users/ POST /users PUT /users DELETE /users/{id} John Deere Credentials# Form of a John Deere Credentials resource: Copy { \"id\": \"UUID\", \"clientKey\": \"str\", \"clientSecret\": \"str\", \"tokenId\": \"str\", \"tokenSecretKey\": \"str\" } Endpoints: Copy GET /john-deere-credentials/{id} GET /john-deere-credentials POST /john-deere-credentials DELETE /john-deere-credentials/{id} Climate FieldView Credentials# Form of a Climate FieldView Credentials resource: Copy { \"id\": \"UUID\", \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\" } Endpoints: Copy GET /climate-field-view-credentials/{id} GET /climate-field-view-credentials POST /climate-field-view-credentials DELETE /climate-field-view-credentials/{id} Trimble Credentials# Form of a Trimble Credentials resource: Copy { \"id\": \"UUID\", \"userName\": \"str\", \"password\": \"str\", \"applicationName\": \"str\", \"serviceIdentityId\": \"str\" } Endpoints: Copy GET /trimble-credentials/{id} GET /trimble-credentials POST /trimble-credentials DELETE /trimble-credentials/{id} CNHI Credentials# Form of a CNHI Credentials resource: Copy { \"id\": \"UUID\", \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\" } Endpoints: Copy GET /cnhi-credentials/{id} GET /cnhi-credentials POST /cnhi-credentials DELETE /cnhi-credentials/{id}  "},{"title":"Endpoints","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#endpoints","content":""},{"title":"GET /users/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-usersid","content":"Get a Leaf User by its id. Response# A Leaf User as a JSON object. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{id}' "},{"title":"GET /users","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-users","content":"Get all Leaf Users. Response# A JSON array containing Leaf Users. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users' "},{"title":"POST /users","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-users","content":"Creates a Leaf User. Request body# Copy { \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", } Besides the four properties of the example above, if you already have created credentials for some provider like John Deere, you can add an entry like the following, specifying the id of the credentials object previously created, so it will be bind to the Leaf User being created. Copy \"johnDeereCredentials\": { \"id\": \"UUID\" } Response# A Leaf User with the id assigned to it and it's credentials. Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users' "},{"title":"PUT /users","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#put-users","content":"Edits an existing Leaf User by submitting a new one. Request body# Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", } Note that if the existing resource has credentials and you don't include them in the body, the new Leaf User will have no credentials. Said that, for keeping the credentials or updating them, include in the JSON above an entry like this: Copy \"johnDeereCredentials\": { \"id\": \"UUID\" } Response# A Leaf User with the id assigned to it and it's credentials. Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", } cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users' "},{"title":"DELETE /users/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-usersid","content":"Deletes an existing Leaf User by id. cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users/{id}' "},{"title":"GET /john-deere-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get--john-deere-credentialsid","content":"Get the John Deere credentials of the user based own his id and returns a JSON with the credentials. Response# Copy { \"id\": \"UUID\", \"clientKey\": \"str\", \"clientSecret\": \"str\", \"tokenId\": \"str\", \"tokenSecretKey\": \"str\" } cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/john-deere-credentials/{id}' "},{"title":"GET /john-deere-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get--john-deere-credentials","content":"Gets all John Deere Credentials. Response# Copy [ { \"id\": \"UUID\", \"clientKey\": \"str\", \"clientSecret\": \"str\", \"tokenId\": \"str\", \"tokenSecretKey\": \"str\" } ] cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/john-deere-credentials' "},{"title":"POST /john-deere-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-john-deere-credentials","content":"Create a John Deere credential for the Leaf User. Request body# Copy { \"clientKey\": \"str\", \"clientSecret\": \"str\", \"tokenId\": \"str\", \"tokenSecretKey\": \"str\" } Response# A John Deere Credentials object with the id assigned to it. Copy { \"id\": \"UUID\", \"clientKey\": \"str\", \"clientSecret\": \"str\", \"tokenId\": \"str\", \"tokenSecretKey\": \"str\" } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/john-deere-credentials' "},{"title":"DELETE john-deere-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete--john-deere-credentialsid","content":"Delete a John Deere credentials by id. cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/john-deere-credentials/{id}' "},{"title":"GET climate-field-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-climate-field-credentialsid","content":"Get a Climate Field View Credentials object by its id. Response# Copy { \"id\": \"UUID\", \"clientId\": \"\", \"clientSecret\": \"\", \"apiKey\": \"\", \"refreshToken\": \"\" } cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/climate-field-view-credentials/{id}' "},{"title":"GET /climate-field-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-climate-field-credentials","content":"Gets all the Climate Field View credentials. Response# Copy [ { \"id\": \"UUID\", \"clientId\": \"\", \"clientSecret\": \"\", \"apiKey\": \"\", \"refreshToken\": \"\" } ] cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/climate-field-view-credentials' "},{"title":"DELETE /climate-field-view-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-climate-field-view-credentialsid","content":"Deletes a \"Climate Field View Credentials\" by id. cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/climate-field-view-credentials/{id}' "},{"title":"POST /climate-field-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-climate-field-credentials","content":"Create a Climate Field View credential for the Leaf User. Request body# Copy { \"id\": \"UUID\", \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\" } Response# A Leaf User with the id assigned to it. Copy { \"id\": \"UUID\", \"clientKey\": \"str\", \"clientSecret\": \"str\", \"tokenId\": \"str\", \"tokenSecretKey\": \"str\" } cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/climate-field-view-credentials' "},{"title":"GET /trimble-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-trimble-credentialsid","content":"Get a \"Trimble Credentials\" resource by its id. Response# A \"Trimble Credentials\" resource as a JSON. JavaScriptPythoncURL Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/trimble-credentials/{id}' "},{"title":"GET /trimble-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get--trimble-credentials","content":"Gets all Trimble Credentials. Response# A JSON array with Trimble Credentials. JavaScriptPythoncURL Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/trimble-credentials' "},{"title":"POST /trimble-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-trimble-credentials","content":"Create a \"Trimble Credentials\" for the Leaf User. Request body# A \"Trimble Credentials\" without id. Copy { \"userName\": \"str\", \"password\": \"str\", \"applicationName\": \"str\", \"serviceIdentityId\": \"str\" } Response# A \"Trimble Credentials\" with the id assigned to it. JavaScriptPythoncURL Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/trimble-credentials' "},{"title":"DELETE trimble-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-trimble-credentialsid","content":"Delete a Trimble Credentials resource by id. JavaScriptPythoncURL Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/trimble-credentials/{id}' "},{"title":"GET /cnhi-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-cnhi-credentialsid","content":"Get a \"CNHI Credentials\" resource by its id. Response# A \"CNHI Credentials\" resource as a JSON. JavaScriptPythoncURL Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/cnhi-credentials/{id}' "},{"title":"GET /cnhi-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#get-cnhi-credentials","content":"Gets all CNHI Credentials. Response# A JSON array with CNHI Credentials. JavaScriptPythoncURL Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/cnhi-credentials' "},{"title":"POST /cnhi-credentials","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#post-cnhi-credentials","content":"Create a \"CNHI Credentials\" for the Leaf User. Request body# A \"CNHI Credentials\" without id. Copy { \"clientId\": \"\", \"clientSecret\": \"\", \"refreshToken\": \"\" } Response# A \"CNHI Credentials\" with the id assigned to it. JavaScriptPythoncURL Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' 'https://{{url}}/services/usermanagement/api/cnhi-credentials' "},{"title":"DELETE cnhi-credentials/{id}","type":1,"pageTitle":"Endpoints","url":"docs/user_management_endpoints#delete-cnhi-credentialsid","content":"Delete a CNHI Credentials resource by id. JavaScriptPythoncURL Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/cnhi-credentials/{id}' tip Please don't hesitate to contact us to schedule a demo, ask a question, request sample data, or suggest a feature! "}]
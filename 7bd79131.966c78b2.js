(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{100:function(e,t,a){"use strict";var n=a(0),r=a(99);t.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},101:function(e,t,a){"use strict";var n=a(0),r=a.n(n),i=a(100),l=a(97),s=a(48),o=a.n(s),b=37,c=39;t.a=function(e){var t=e.block,a=e.children,s=e.defaultValue,p=e.values,d=e.groupId,u=Object(i.a)(),O=u.tabGroupChoices,m=u.setTabGroupChoices,j=Object(n.useState)(s),f=j[0],h=j[1],g=Object(n.useState)(!1),N=g[0],v=g[1];if(null!=d){var y=O[d];null!=y&&y!==f&&p.some((function(e){return e.value===y}))&&h(y)}var T=function(e){h(e),null!=d&&m(d,e)},w=[],E=function(e){e.metaKey||e.altKey||e.ctrlKey||v(!0)},C=function(){v(!1)};return Object(n.useEffect)((function(){window.addEventListener("keydown",E),window.addEventListener("mousedown",C)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":t})},p.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===t,className:Object(l.a)("tabs__item",o.a.tabItem,{"tabs__item--active":f===t}),style:N?{}:{outline:"none"},key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case c:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case b:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e),E(e)},onFocus:function(){return T(t)},onClick:function(){T(t),v(!1)},onPointerDown:function(){return v(!1)}},a)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter((function(e){return e.props.value===f}))[0]))}},102:function(e,t,a){"use strict";var n=a(0),r=a.n(n);t.a=function(e){return r.a.createElement("div",null,e.children)}},103:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return r}))},78:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(6),i=(a(0),a(95)),l=a(101),s=a(102),o=(a(98),{title:"Endpoints"}),b={unversionedId:"operations_endpoints",id:"operations_endpoints",isDocsHomePage:!1,title:"Endpoints",description:"[1]//github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection",source:"@site/docs/operations_endpoints.md",permalink:"/docs/docs/operations_endpoints",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/operations_endpoints.md",sidebar:"docs",previous:{title:"Overview",permalink:"/docs/docs/operations_overview"},next:{title:"Sample responses",permalink:"/docs/docs/operations_sample_output"}},c=[{value:"About",id:"about",children:[{value:"Get all files",id:"get-all-files",children:[]},{value:"Get a file",id:"get-a-file",children:[]},{value:"Get a file summary",id:"get-a-file-summary",children:[]},{value:"Get a file&#39;s images",id:"get-a-files-images",children:[]},{value:"Get a file&#39;s units",id:"get-a-files-units",children:[]},{value:"Upload a file",id:"upload-a-file",children:[]},{value:"Get Batch upload object",id:"get-batch-upload-object",children:[]},{value:"Get Batch upload object files",id:"get-batch-upload-object-files",children:[]},{value:"Upload specific file",id:"upload-specific-file",children:[]},{value:"Merge files",id:"merge-files",children:[]}]}],p={rightToc:c};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"about"},"About"),Object(i.b)("p",null,"All HTTP methods should be prepended by this service's endpoint:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"https://api.withleaf.io/services/operations/api\n")),Object(i.b)("p",null,"This service has the following endpoints available:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-files"}),"Get all files")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-file"}),"Get a file")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-file-summary"}),"Get a file summary")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}/summary"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-files-images"}),"Get a file's images")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}/images"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-files-units"}),"Get a file's units")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}/units"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#upload-a-file"}),"Upload a file")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/batch"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#upload-specific-file"}),"Upload specific file")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"#merge-files"}),"Merge files")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/merge"))))),Object(i.b)("p",null,"For easily testing these endpoints, we recommend using our Postman ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection"}),"collection"),"."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"requires Leaf User with credentials")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"To have access to operation files, you will need a Leaf User with valid credentials\nfrom the provider you want to access data. If you don't have a Leaf User or you\nhave not connected it with any provider yet, see ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("a",Object(n.a)({parentName:"strong"},{href:""}),"how to create a Leaf User")),"\nor ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("a",Object(n.a)({parentName:"strong"},{href:""}),"how to add credentials to a Leaf User")),"."))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-all-files"},"Get all files"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files")),Object(i.b)("p",null,"Gets a paged list of files that belong to the current logged in user. It is\npossible to filter the results by passing some query parameters. They are listed\nbelow."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"leafUserId")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uuid of one of your users")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"provider")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"CNHI"),", ",Object(i.b)("inlineCode",{parentName:"td"},"JohnDeere"),", ",Object(i.b)("inlineCode",{parentName:"td"},"Trimble"),", ",Object(i.b)("inlineCode",{parentName:"td"},"ClimateFieldView")," or ",Object(i.b)("inlineCode",{parentName:"td"},"Leaf"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"status")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"processed"),", ",Object(i.b)("inlineCode",{parentName:"td"},"failed")," or ",Object(i.b)("inlineCode",{parentName:"td"},"processing"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"origin")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"provider"),", ",Object(i.b)("inlineCode",{parentName:"td"},"automerged"),", ",Object(i.b)("inlineCode",{parentName:"td"},"merged")," or ",Object(i.b)("inlineCode",{parentName:"td"},"uploaded"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"organizationId")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"the provider organizationId (only available for John Deere)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"createdTime")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations from the createdTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"operationStartTime")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations from the operationStartTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"operationEndTime")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations until the operationEndTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"operationType")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"applied"),", ",Object(i.b)("inlineCode",{parentName:"td"},"planted")," or ",Object(i.b)("inlineCode",{parentName:"td"},"harvested"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"minArea")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"a number (Double) representing the minimum area (square meters) of the operations to be returned")))),Object(i.b)("p",null,"You can also pass some parameters used exclusively for paging through results.\nThey are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page")),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files'\n")))),Object(i.b)("h4",{id:"response"},"Response"),Object(i.b)("p",null,'The response is a JSON with the key "operations" referring to a list of files.\n',Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"operations_sample_output"}),"Here's a link with sample responses"),' for "planted", "applied"\nand "harvested" operation files.'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "message": "SUCCESS",\n    "operations": [OPERATION]\n}    \n')),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-file"},"Get a file"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}")),Object(i.b)("p",null,"Gets a single file by its id."),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}'\n")))),Object(i.b)("h4",{id:"response-1"},"Response"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"operations_sample_output"}),"Here's a link with sample responses"),' for "planted", "applied"\nand "harvested" operation files.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-file-summary"},"Get a file summary"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}/summary")),Object(i.b)("p",null,"Gets the summary, if available, for the file id."),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/summary'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/summary'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/summary'\n")))),Object(i.b)("h4",{id:"response-2"},"Response"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"operations_sample_output"}),"Here's a link with sample responses"),' for "planted", "applied"\nand "harvested" operation files.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-files-images"},"Get a file's images"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}/images")),Object(i.b)("p",null,"Gets a list of PNG images generated from the operation's file properties."),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/images'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/images'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/images'\n"))),Object(i.b)(s.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a JSON list of the following format:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "property": "elevation",\n    "ramp": {\n      "0%":   [200,   0, 0],\n      "35%":  [255,  40, 0],\n      "45%":  [255, 150, 0],\n      "55%":  [255, 240, 0],\n      "65%":  [  0, 230, 0],\n      "75%":  [  0, 190, 0],\n      "100%": [  0, 130, 0],\n      "nv":   [  0,   0, 0, 0]\n    },\n    "url": "string"\n  },\n  ...\n]\n')),Object(i.b)("p",null,"  The ",Object(i.b)("inlineCode",{parentName:"p"},"property")," refers to the property extracted from files' data to generate the\nimage. In the example above, the image would represent the elevation."),Object(i.b)("p",null,"  The ",Object(i.b)("inlineCode",{parentName:"p"},"ramp")," is the color ramp used to generate the image. The percentages\ncorrespond to the minimum (0%) and maximum (100%) values in the image. The\nlisted values correspond to RGB values used. The ",Object(i.b)("inlineCode",{parentName:"p"},"nv")," refers to ",Object(i.b)("inlineCode",{parentName:"p"},"no value"),". It\nis used internally to make the image transparent on places without data.\nCurrently, this ramp is the same in all images processed."),Object(i.b)("p",null,"  We also generate an auxiliary ",Object(i.b)("inlineCode",{parentName:"p"},"xml")," with geographic information to handle this\nimage on GIS environments. You just need to append the ",Object(i.b)("inlineCode",{parentName:"p"},'".aux.xml"')," string to the png url."))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-files-units"},"Get a file's units"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}/units")),Object(i.b)("p",null,"Gets the file's properties and their units."),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/units'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/units'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/units'\n"))),Object(i.b)(s.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a JSON like the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "distance": "ft",\n    "heading": "arcdeg",\n    "speed": "mi/hr",\n    "elevation": "ft",\n    "harvestMoisture": "prcnt",\n    "wetMass": "lb",\n    "yieldVolume": "bu",\n    "equipmentWidth": "ft"\n}\n')),Object(i.b)("p",null,"These properties vary depending on the operationType, but you can expect the same,\nstandardized keys, across different providers."),Object(i.b)("p",null,"Units usually don't change for the same Leaf User, since the providers units\nconfiguration is based on their location. But keep in mind that it's best to\nalways take the units into consideration, just to be sure."))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"upload-a-file"},"Upload a file"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/batch")),Object(i.b)("p",null,"Posts/creates a new file in Leaf. The file must be sent as a zip."),Object(i.b)("p",null,'Leaf has two "file upload" enpoints. This endpoint accepts a .zip of operation files, detects which files are in the .zip, and returns the ID of the process, which can in turn be used to retrieve the ID\'s of the files being processed. It almost every case, this endpoint is the correct one to use for file conversions.\nIf you know that which provider a zip file\ncame from and also know that it contains only operations files from the same\noperation, please use ',Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#upload-specific-file"}),"our specific file upload endpoint"),". "),Object(i.b)("p",null,"This endpoint receives two required URL parameters, a ",Object(i.b)("inlineCode",{parentName:"p"},"leafUserId")," and ",Object(i.b)("inlineCode",{parentName:"p"},"provider")," "),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"provider")," can be set as one of the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Other\nClimateFieldView\nCNHI\nJohnDeere\nTrimble\n")),Object(i.b)("p",null,'If provider is not set or set to "Other", Leaf will detect which files are present in the .zip file and process them accordingly. '),Object(i.b)("p",null,"Leaf will detect files present in the uploaded .zip and\ncreate/return one file id for each file that is detected. These individual files can then be accessed individually by their ID, or via their associated field boundary."),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/batch'\n\nconst headers = {\n  'Authorization': `Bearer ${TOKEN}`\n  'Content-Type': 'multipart/form-data'\n}\n\nconst params = {\n  provider: 'JohnDeere',\n  leafUserId: 'id'\n}\n\nconst form = new FormData()\nform.append('file', 'shapefile.zip')\n\naxios.post(endpoint, form, { headers, params })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/batch'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nfiles = {'file': open('shapefile.zip')}\nparams = {\n  'provider': 'JohnDeere',\n  'leafUserId': 'id'\n}\n\nresponse = requests.post(endpoint, headers=headers, files=files, params=params)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -F 'file=shapefile.zip' \\\n    'https://api.withleaf.io/services/operations/api/batch?' \\\n    'provider=JohnDeere&leafUserId=id'\n"))),Object(i.b)(s.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a single JSON object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "f893c921-0f38-4f39-9f3e-be765ac61df0",\n  "leafUserId": "bdf5f624-fb9b-4294-949c-29e979f0ce5a",\n  "provider": "Other",\n  "status": "RECEIVED"\n}\n')))),Object(i.b)("p",null,"This id can then be queried to retrieve the individual file ID's.\nAlternatively, you can query each of the files individually with\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#get-a-file"}),"Get a File")," or all of them, filtering by ",Object(i.b)("inlineCode",{parentName:"p"},"createdDate"),", on\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#get-all-files"}),"Get all Files"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-batch-upload-object"},"Get Batch upload object"),Object(i.b)("p",null,"Once you've uploaded files, you can then query these files individually, merge the files, or query for them\nvia ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#get-all-files"}),"Get all Files"),".\nYou can also query the batch upload ID to see a list of files generated in the upload and a status of the upload with this endpoint."),Object(i.b)("p",null,"Move through the tabs below to see requests and response samples."),Object(i.b)(l.a,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import requests\n\nurl = \"https://api.withleaf.io/services/operations/api/batch/{batch_id}/\"\n\nheaders = {'Authorization': 'Bearer YOUR_LEAF_TOKEN'}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)\n"))),Object(i.b)(s.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  When you query a batch upload ID, you will receive a single JSON object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "id": "f893c921-0f38-4f39-9f3e-be765ac61df0",\n    "leafUserId": "bdf5f624-fb9b-4294-949c-29e979f0ce5a",\n    "provider": "Other",\n    "status": "PROCESSED",\n    "leafFiles": [\n        "8334f4bb-48de-44e2-903b-6dedd6db6683",\n        "81778f58-8eed-41cc-a025-e653ea85b01e",\n        "0f606bef-b529-4899-854c-9b698cd08762",\n        "84fec273-b458-4be7-8feb-44204502f126",\n        "92b7367b-2ffd-4a82-ba9b-5a40e8b68714",\n        "90e7e130-8f33-4752-b8f4-3a132246f047",\n        "cb97857e-61b0-4fbe-a5c1-1083cfa6738f",\n        "0cded205-7734-40fb-8906-b82d36e35845",\n        "dc24d491-983c-4ebe-b961-8c749943529f",\n        "67af8697-47bc-4886-935f-5880d1eba31d",\n        "8b7d8b7b-e682-4c3e-aee2-3b7713cc81a4",\n        "e5067ed3-8463-43b9-a8a5-3b3c1eee44bc",\n        "b9d30d3a-0207-410f-81da-afb31a1b36cb",\n        "eace9b90-a520-4c4c-af89-4c3fd5da68fa",\n        "6ea55c68-203f-448b-9e7f-dcd014c31cc3"\n    ]\n}\n')))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-batch-upload-object-files"},"Get Batch upload object files"),Object(i.b)("p",null,"After uploading a file, you can see a summary of each individual file by querying the batch upload ID."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import requests\n\nurl = \"https://api.withleaf.io/services/operations/api/batch/{batch_id}/\"\n\nheaders = {'Authorization': 'Bearer '}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)\n\n")),Object(i.b)("p",null,"Which will result in a response containing each file's summary and processing\nstatus."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"upload-specific-file"},"Upload specific file"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/files")),Object(i.b)("p",null,"Posts/creates a new file in Leaf. The file must be sent as a zip."),Object(i.b)("p",null,'Leaf has two "file upload" enpoints. If you know that what provider a zip file\ncame from and also know that it contains only operations files from the same\noperation, this is the right endpoint. For every other case, please refer to\n',Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#upload-a-file"}),"our batch endpoint"),"."),Object(i.b)("p",null,"This endpoint receives three URL parameters, one of them is optional."),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"leafUserId"),", ",Object(i.b)("inlineCode",{parentName:"p"},"provider")," and ",Object(i.b)("inlineCode",{parentName:"p"},"fileFormat")," (optional). "),Object(i.b)("p",null,"When you are sure which provider a file came from and that if there are multiple\nfiles they belong to the same operations, you can add the ",Object(i.b)("inlineCode",{parentName:"p"},"fileFormat"),", that\nmust be one of the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"ADAPTADM\nCN1\nDATCLIMATE\nGEOJSON\nISO11783\nSHAPEFILE\nTRIMBLE\n")),Object(i.b)("p",null,"Along with the ",Object(i.b)("inlineCode",{parentName:"p"},"fileFormat"),", a ",Object(i.b)("inlineCode",{parentName:"p"},"provider")," must be set and be one of the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"Leaf\nClimateFieldView\nCNHI\nJohnDeere\nTrimble\n")),Object(i.b)("p",null,"When unsure about the format or when there can be more than one format in the same\nzip, you can use our generic uploader and Leaf will detect the files present.\nFor that, set ",Object(i.b)("inlineCode",{parentName:"p"},"provider")," to ",Object(i.b)("inlineCode",{parentName:"p"},"Leaf")," and don't include ",Object(i.b)("inlineCode",{parentName:"p"},"fileFormat"),".\nLeaf will detect files present in a number of different ways and hierarchies and\ncreate/return one file id for each detection. This is very important because it's\nslightly different than when uploading a zip file you are sure refers to the\nsame operation and same provider, creating only one file even if the zip contains\nmultiple files for the same operation."),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files'\n\nconst headers = {\n  'Authorization': `Bearer ${TOKEN}`\n  'Content-Type': 'multipart/form-data'\n}\n\nconst params = {\n  fileFormat: 'SHAPEFILE',\n  provider: 'JohnDeere',\n  leafUserId: 'id'\n}\n\nconst form = new FormData()\nform.append('file', 'shapefile.zip')\n\naxios.post(endpoint, form, { headers, params })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nfiles = {'file': open('shapefile.zip')}\nparams = {\n  'fileFormat': 'SHAPEFILE',\n  'provider': 'JohnDeere',\n  'leafUserId': 'id'\n}\n\nresponse = requests.post(endpoint, headers=headers, files=files, params=params)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -F 'file=shapefile.zip' \\\n    'https://api.withleaf.io/services/operations/api/files?' \\\n    'fileFormat=SHAPEFILE&provider=JohnDeere&leafUserId=id'\n"))),Object(i.b)(s.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a single JSON object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "message": "Your file is being processed and will be available in a few minutes",\n  "ids": [\n      "file_id_1",\n      "file_id_2",\n      "file_id_...",\n      "file_id_n",\n  ]\n}\n')))),Object(i.b)("p",null,"After a few minutes, you can query each of the files individually on\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#get-a-file"}),"Get a File")," or all of them, filtering by ",Object(i.b)("inlineCode",{parentName:"p"},"createdDate"),", on\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#get-all-files"}),"Get all Files"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"merge-files"},"Merge files"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/files/merge")),Object(i.b)("p",null,"Posts a merge operation to our server."),Object(i.b)("p",null,"A merge operation is performed asynchronously. This call will return immediately\nwith the newly created file entry, but at this point, the file is not already\nprocessed and available. You will need to make a new ",Object(i.b)("inlineCode",{parentName:"p"},"GET /files")," request for the\nnew id and check the status. A status value of ",Object(i.b)("inlineCode",{parentName:"p"},"processed")," means the file is\ndone merging."),Object(i.b)("p",null,"A merge process has some validations, the files passed must belong to\nthe same ",Object(i.b)("inlineCode",{parentName:"p"},"leafUserId"),", be of the same operation type and have the status as ",Object(i.b)("inlineCode",{parentName:"p"},"processed"),".\nIf any of those filters fail, the endpoint will result in HTTP 400 error."),Object(i.b)("p",null,"It receives a single JSON object with the ",Object(i.b)("inlineCode",{parentName:"p"},"ids")," entry. Example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "ids": [ "id1", "id2", "so on" ]\n}\n')),Object(i.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/merge'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = { ids: [ 'id1', 'id2' ] }\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/merge'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {'ids': ['id1', 'id2']}\n\nresponse = requests.post(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ \"ids\": [ \"id1\", \"id2\" ] }'\n    'https://api.withleaf.io/services/operations/api/files/merge'\n"))),Object(i.b)(s.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a single JSON object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "id",\n  "status": "SENT_TO_MERGE"\n}\n')),Object(i.b)("p",null,"  After a few minutes, you can consult the result of Leaf processing over this file by\nperforming GET consults in this."))))}d.isMDXComponent=!0},95:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),c=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),p=c(a),u=n,O=p["".concat(l,".").concat(u)]||p[u]||d[u]||i;return a?r.a.createElement(O,s(s({ref:t},b),{},{components:a})):r.a.createElement(O,s({ref:t},b))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var b=2;b<i;b++)l[b]=a[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},96:function(e,t,a){"use strict";var n=a(0),r=a(20);t.a=function(){var e=Object(n.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},97:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}},98:function(e,t,a){"use strict";a.d(t,"b",(function(){return i})),a.d(t,"a",(function(){return l}));var n=a(96),r=a(103);function i(){var e=Object(n.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,a=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,a,n){var i=void 0===n?{}:n,l=i.forcePrependBaseUrl,s=void 0!==l&&l,o=i.absolute,b=void 0!==o&&o;if(!a)return a;if(a.startsWith("#"))return a;if(Object(r.b)(a))return a;if(s)return t+a;var c=!a.startsWith(t)?t+a.replace(/^\//,""):a;return b?e+c:c}(i,a,e,t)}}}function l(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},99:function(e,t,a){"use strict";var n=a(0),r=Object(n.createContext)(void 0);t.a=r}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{100:function(e,t,a){"use strict";var n=a(0),r=a(99);t.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},101:function(e,t,a){"use strict";var n=a(0),r=a.n(n),l=a(100),b=a(97),i=a(48),c=a.n(i),p=37,o=39;t.a=function(e){var t=e.block,a=e.children,i=e.defaultValue,s=e.values,d=e.groupId,O=Object(l.a)(),j=O.tabGroupChoices,m=O.setTabGroupChoices,u=Object(n.useState)(i),g=u[0],N=u[1],f=Object(n.useState)(!1),h=f[0],y=f[1];if(null!=d){var v=j[d];null!=v&&v!==g&&s.some((function(e){return e.value===v}))&&N(v)}var T=function(e){N(e),null!=d&&m(d,e)},w=[],x=function(e){e.metaKey||e.altKey||e.ctrlKey||y(!0)},E=function(){y(!1)};return Object(n.useEffect)((function(){window.addEventListener("keydown",x),window.addEventListener("mousedown",E)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(b.a)("tabs",{"tabs--block":t})},s.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(b.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===t}),style:h?{}:{outline:"none"},key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case o:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case p:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e),x(e)},onFocus:function(){return T(t)},onClick:function(){T(t),y(!1)},onPointerDown:function(){return y(!1)}},a)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter((function(e){return e.props.value===g}))[0]))}},102:function(e,t,a){"use strict";var n=a(0),r=a.n(n);t.a=function(e){return r.a.createElement("div",null,e.children)}},103:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return r}))},78:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return p})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return d}));var n=a(2),r=a(6),l=(a(0),a(95)),b=a(101),i=a(102),c=(a(98),{title:"Endpoints"}),p={unversionedId:"operations_endpoints",id:"operations_endpoints",isDocsHomePage:!1,title:"Endpoints",description:"[1]//github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection",source:"@site/docs/operations_endpoints.md",permalink:"/docs/docs/operations_endpoints",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/operations_endpoints.md",sidebar:"docs",previous:{title:"Overview",permalink:"/docs/docs/operations_overview"},next:{title:"Sample responses",permalink:"/docs/docs/operations_sample_output"}},o=[{value:"About",id:"about",children:[{value:"Get all files",id:"get-all-files",children:[]},{value:"Get a file",id:"get-a-file",children:[]},{value:"Get a file summary",id:"get-a-file-summary",children:[]},{value:"Get a file&#39;s images",id:"get-a-files-images",children:[]},{value:"Get a file&#39;s units",id:"get-a-files-units",children:[]},{value:"Upload a file",id:"upload-a-file",children:[]},{value:"Merge files",id:"merge-files",children:[]}]},{value:"REST Resources",id:"rest-resources",children:[{value:"Operation File Summary Resource",id:"operation-file-summary-resource",children:[]},{value:"Standard Geojson Resource",id:"standard-geojson-resource",children:[]}]},{value:"List of properties",id:"list-of-properties",children:[{value:"Summary properties",id:"summary-properties",children:[]},{value:"Standard GEOJSON properties",id:"standard-geojson-properties",children:[]}]}],s={rightToc:o};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"about"},"About"),Object(l.b)("p",null,"All HTTP methods should be prepended by this service's endpoint:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"https://api.withleaf.io/services/operations/api\n")),Object(l.b)("p",null,"This service has the following endpoints available:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-files"}),"Get all files")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("span",{class:"badge badge--success"},"GET")," ",Object(l.b)("inlineCode",{parentName:"td"},"/files"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-file"}),"Get a file")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("span",{class:"badge badge--success"},"GET")," ",Object(l.b)("inlineCode",{parentName:"td"},"/files/{id}"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-file-summary"}),"Get a file summary")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("span",{class:"badge badge--success"},"GET")," ",Object(l.b)("inlineCode",{parentName:"td"},"/files/{id}/summary"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-files-images"}),"Get a file's images")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("span",{class:"badge badge--success"},"GET")," ",Object(l.b)("inlineCode",{parentName:"td"},"/files/{id}/images"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-files-images"}),"Get a file's units")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("span",{class:"badge badge--success"},"GET")," ",Object(l.b)("inlineCode",{parentName:"td"},"/files/{id}/units"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"#upload-a-file"}),"Upload a file")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("span",{class:"badge badge--warning"},"POST")," ",Object(l.b)("inlineCode",{parentName:"td"},"/files"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"#merge-files"}),"Merge files")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("span",{class:"badge badge--warning"},"POST")," ",Object(l.b)("inlineCode",{parentName:"td"},"/files/merge"))))),Object(l.b)("p",null,"For easily testing these endpoints, we recommend using our Postman ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection"}),"collection"),"."),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"requires Leaf User with credentials")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"To have access to operation files, you will need a Leaf User with valid credentials\nfrom the provider you want to access data. If you don't have a Leaf User or you\nhave not connected it with any provider yet, see ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:""}),"how to create a Leaf User")),"\nor ",Object(l.b)("strong",{parentName:"p"},Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:""}),"how to add credentials to a Leaf User")),"."))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get-all-files"},"Get all files"),Object(l.b)("p",null,"\xa0",Object(l.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(l.b)("inlineCode",{parentName:"p"},"/files")),Object(l.b)("p",null,"Gets a paged list of files that belong to the current logged in user. It is\npossible to filter the results by passing some query parameters. They are listed\nbelow."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Values"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"leafUserId")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uuid of one of your users")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"provider")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"CNHI"),", ",Object(l.b)("inlineCode",{parentName:"td"},"JohnDeere"),", ",Object(l.b)("inlineCode",{parentName:"td"},"Trimble"),", ",Object(l.b)("inlineCode",{parentName:"td"},"ClimateFieldView")," or ",Object(l.b)("inlineCode",{parentName:"td"},"Leaf"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"status")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"processed"),", ",Object(l.b)("inlineCode",{parentName:"td"},"failed")," or ",Object(l.b)("inlineCode",{parentName:"td"},"processing"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"origin")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"provider"),", ",Object(l.b)("inlineCode",{parentName:"td"},"automerged"),", ",Object(l.b)("inlineCode",{parentName:"td"},"merged")," or ",Object(l.b)("inlineCode",{parentName:"td"},"uploaded"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"organizationId")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"the provider organizationId (only available for John Deere)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"createdTime")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations from the createdTime onward")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"operationStartTime")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations from the operationStartTime onward")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"operationEndTime")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations until the operationEndTime")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"operationType")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"applied"),", ",Object(l.b)("inlineCode",{parentName:"td"},"planted")," or ",Object(l.b)("inlineCode",{parentName:"td"},"harvested"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"minArea")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"a number (Double) representing the minimum area (square meters) of the operations to be returned")))),Object(l.b)("p",null,"You can also pass some parameters used exclusively for paging through results.\nThey are:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page")),Object(l.b)(b.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(i.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files'\n"))),Object(l.b)(i.a,{value:"json",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n       "id": "11e8df30-df5c-4373-8dc1-fb275cdd3ea4",\n       "provider": "ClimateFieldView",\n       "sizeInBytes": 24249,\n       "originalFile": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/19e9fe2e-399c-4735-b4b1-9b052840e2f5.zip",\n       "standardGeojson": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/14aa028a-72f0-473a-8fc8-e2b3edef7c3f.json",\n       "leafUserId": "1f351aa6-c05a-473a-89ba-d63a87d9b302",\n       "apiOwnerUsername": "leafdemos",\n       "status": "processed",\n       "origin": "provider",\n       "createdTime": "2020-10-29T19:44:57.723",\n       "operationStartTime": "2019-04-29T00:24:52.084",\n       "operationEndTime": "2019-04-29T00:43:03.276",\n       "summary": {\n           "type": "Feature",\n           "properties": {\n               "totalDistance": 10900.947723655045,\n               "speed": {\n                   "average": 10.33722442338795,\n                   "standardDeviation": 1.5361860364425932,\n                   "min": 0.3355403244495392,\n                   "max": 11.497848510742188\n               },\n               "elevation": {\n                   "average": 3577.9168289290683,\n                   "standardDeviation": 0.6729413774132946,\n                   "min": 3576.9,\n                   "max": 3578.9\n               },\n               "varieties": [\n                   "28-0-0 uan @ 160 lb/ac",\n                   "agrotain advanced @ 2.5 gal/ac",\n                   "bicep ii magnum @ 32 fl oz/ac",\n                   "fs optique @ 20 fl oz/ac",\n                   "roundup powermax (usa) @ 16 fl oz/ac",\n                   "sharpen powered by kixor @ 1 fl oz/ac"\n               ],\n               "appliedRate": {\n                   "average": 14.757733806861584,\n                   "standardDeviation": 0.3157623349195758,\n                   "min": 13.899999643744623,\n                   "max": 15.599999476023033\n               },\n               "operationType": "applied",\n               "totalArea": 319471.8942196931,\n               "machineSpecification": {\n                   "machineDescription": "Agco Rogator RG1300",\n                   "implementDescription": "Sprayer",\n                   "implementWidth": 1440.0000000000002\n               }\n           },\n           "geometry": {\n               "type": "MultiPolygon",\n               "coordinates": [\n                   [\n                       [\n                           [-89.83382833, 39.71963950, 3578.8],\n                           [-89.83443583, 39.71966733, 3578.8],\n                           [-89.83452050, 39.71968466, 3578.6],\n                           [-89.83451283, 39.72648850, 3577.8],\n                           [-89.83010300, 39.72748950, 3577.2],\n                           [-89.83005766, 39.72749950, 3577.2],\n                           [-89.83001900, 39.72750716, 3577.2],\n                           [-89.82999183, 39.72751166, 3577.3],\n                           [-89.82997116, 39.72751383, 3577.3],\n                           [-89.82993383, 39.72020166, 3578.6],\n                           [-89.82993866, 39.71975133, 3578.2],\n                           [-89.82996366, 39.71968966, 3578.1],\n                           [-89.83382833, 39.71963950, 3578.8]\n                       ]\n                   ]\n               ]\n           }\n       },\n       "sourceFiles": []\n   },\n  ...\n]\n')),Object(l.b)("p",null,"  The ",Object(l.b)("inlineCode",{parentName:"p"},"sourceFiles")," entry in this JSON response is a list of files' ids that were\nused to create the file. It will appear only in ",Object(l.b)("em",{parentName:"p"},'"merge"')," and ",Object(l.b)("em",{parentName:"p"},'"automerged"')," files."))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get-a-file"},"Get a file"),Object(l.b)("p",null,"\xa0",Object(l.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(l.b)("inlineCode",{parentName:"p"},"/files/{id}")),Object(l.b)("p",null,"Gets a single file by its id."),Object(l.b)(b.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(i.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}'\n"))),Object(l.b)(i.a,{value:"json",mdxType:"TabItem"},Object(l.b)("p",null,'  This is a sample response of "applied" operation type'),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n     "id": "11e8df30-df5c-4373-8dc1-fb275cdd3ea4",\n     "provider": "ClimateFieldView",\n     "sizeInBytes": 24249,\n     "originalFile": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/19e9fe2e-399c-4735-b4b1-9b052840e2f5.zip",\n     "standardGeojson": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/14aa028a-72f0-473a-8fc8-e2b3edef7c3f.json",\n     "leafUserId": "1f351aa6-c05a-473a-89ba-d63a87d9b302",\n     "apiOwnerUsername": "leafdemos",\n     "status": "processed",\n     "origin": "provider",\n     "createdTime": "2020-10-29T19:44:57.723",\n     "operationStartTime": "2019-04-29T00:24:52.084",\n     "operationEndTime": "2019-04-29T00:43:03.276",\n     "summary": {\n         "type": "Feature",\n         "properties": {\n             "totalDistance": 10900.947723655045,\n             "speed": {\n                 "average": 10.33722442338795,\n                 "standardDeviation": 1.5361860364425932,\n                 "min": 0.3355403244495392,\n                 "max": 11.497848510742188\n             },\n             "elevation": {\n                 "average": 3577.9168289290683,\n                 "standardDeviation": 0.6729413774132946,\n                 "min": 3576.9,\n                 "max": 3578.9\n             },\n             "varieties": [\n                 "28-0-0 uan @ 160 lb/ac",\n                 "agrotain advanced @ 2.5 gal/ac",\n                 "bicep ii magnum @ 32 fl oz/ac",\n                 "fs optique @ 20 fl oz/ac",\n                 "roundup powermax (usa) @ 16 fl oz/ac",\n                 "sharpen powered by kixor @ 1 fl oz/ac"\n             ],\n             "appliedRate": {\n                 "average": 14.757733806861584,\n                 "standardDeviation": 0.3157623349195758,\n                 "min": 13.899999643744623,\n                 "max": 15.599999476023033\n             },\n             "operationType": "applied",\n             "totalArea": 319471.8942196931,\n             "machineSpecification": {\n                 "machineDescription": "Agco Rogator RG1300",\n                 "implementDescription": "Sprayer",\n                 "implementWidth": 1440.0000000000002\n             }\n         },\n         "geometry": {\n             "type": "MultiPolygon",\n             "coordinates": [\n                 [\n                     [\n                         [-89.83382833, 39.71963950, 3578.8],\n                         [-89.83443583, 39.71966733, 3578.8],\n                         [-89.83452050, 39.71968466, 3578.6],\n                         [-89.83451283, 39.72648850, 3577.8],\n                         [-89.83010300, 39.72748950, 3577.2],\n                         [-89.83005766, 39.72749950, 3577.2],\n                         [-89.83001900, 39.72750716, 3577.2],\n                         [-89.82999183, 39.72751166, 3577.3],\n                         [-89.82997116, 39.72751383, 3577.3],\n                         [-89.82993383, 39.72020166, 3578.6],\n                         [-89.82993866, 39.71975133, 3578.2],\n                         [-89.82996366, 39.71968966, 3578.1],\n                         [-89.83382833, 39.71963950, 3578.8]\n                     ]\n                 ]\n             ]\n         }\n     },\n     "sourceFiles": []\n }\n')))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get-a-file-summary"},"Get a file summary"),Object(l.b)("p",null,"\xa0",Object(l.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(l.b)("inlineCode",{parentName:"p"},"/files/{id}/summary")),Object(l.b)("p",null,"Gets the summary, if available, for the file id."),Object(l.b)(b.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/summary'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/summary'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(i.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/summary'\n"))),Object(l.b)(i.a,{value:"json",mdxType:"TabItem"},Object(l.b)("p",null,"  Returns a single ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://tools.ietf.org/html/rfc7946"}),"GeoJSON")," feature containing the convex hull of all operation\ndata and some statistics calculated from it."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "type": "Feature",\n    "properties": {\n        "totalDistance": 10900.947723655045,\n        "speed": {\n            "average": 10.33722442338795,\n            "standardDeviation": 1.5361860364425932,\n            "min": 0.3355403244495392,\n            "max": 11.497848510742188\n        },\n        "elevation": {\n            "average": 3577.9168289290683,\n            "standardDeviation": 0.6729413774132946,\n            "min": 3576.9,\n            "max": 3578.9\n        },\n        "varieties": [\n            "28-0-0 uan @ 160 lb/ac",\n            "agrotain advanced @ 2.5 gal/ac",\n            "bicep ii magnum @ 32 fl oz/ac",\n            "fs optique @ 20 fl oz/ac",\n            "roundup powermax (usa) @ 16 fl oz/ac",\n            "sharpen powered by kixor @ 1 fl oz/ac"\n        ],\n        "appliedRate": {\n            "average": 14.757733806861584,\n            "standardDeviation": 0.3157623349195758,\n            "min": 13.899999643744623,\n            "max": 15.599999476023033\n        },\n        "operationType": "applied",\n        "totalArea": 319471.8942196931,\n        "machineSpecification": {\n            "machineDescription": "Agco Rogator RG1300",\n            "implementDescription": "Sprayer",\n            "implementWidth": 1440.0000000000002\n        }\n    },\n    "geometry": {\n        "type": "MultiPolygon",\n        "coordinates": [\n            [\n                [\n                    [-89.83382833, 39.71963950, 3578.8],\n                    [-89.83443583, 39.71966733, 3578.8],\n                    [-89.83452050, 39.71968466, 3578.6],\n                    [-89.83451283, 39.72648850, 3577.8],\n                    [-89.83010300, 39.72748950, 3577.2],\n                    [-89.83005766, 39.72749950, 3577.2],\n                    [-89.83001900, 39.72750716, 3577.2],\n                    [-89.82999183, 39.72751166, 3577.3],\n                    [-89.82997116, 39.72751383, 3577.3],\n                    [-89.82993383, 39.72020166, 3578.6],\n                    [-89.82993866, 39.71975133, 3578.2],\n                    [-89.82996366, 39.71968966, 3578.1],\n                    [-89.83382833, 39.71963950, 3578.8]\n                ]\n            ]\n        ]\n    }\n}\n')))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get-a-files-images"},"Get a file's images"),Object(l.b)("p",null,"\xa0",Object(l.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(l.b)("inlineCode",{parentName:"p"},"/files/{id}/images")),Object(l.b)("p",null,"Gets a list of PNG images generated from the operation's file properties."),Object(l.b)(b.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/images'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/images'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(i.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/images'\n"))),Object(l.b)(i.a,{value:"json",mdxType:"TabItem"},Object(l.b)("p",null,"  Returns a JSON list of the following format:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "property": "elevation",\n    "ramp": {\n      "0%":   [200,   0, 0],\n      "35%":  [255,  40, 0],\n      "45%":  [255, 150, 0],\n      "55%":  [255, 240, 0],\n      "65%":  [  0, 230, 0],\n      "75%":  [  0, 190, 0],\n      "100%": [  0, 130, 0],\n      "nv":   [  0,   0, 0, 0]\n    },\n    "url": "string"\n  },\n  ...\n]\n')),Object(l.b)("p",null,"  The ",Object(l.b)("inlineCode",{parentName:"p"},"property")," refers to the property extracted from files' data to generate the\nimage. In the example above, the image would represent the elevation."),Object(l.b)("p",null,"  The ",Object(l.b)("inlineCode",{parentName:"p"},"ramp")," is the color ramp used to generate the image. The percentages\ncorrespond to the minimum (0%) and maximum (100%) values in the image. The\nlisted values correspond to RGB values used. The ",Object(l.b)("inlineCode",{parentName:"p"},"nv")," refers to ",Object(l.b)("inlineCode",{parentName:"p"},"no value"),". It\nis used internally to make the image transparent on places without data.\nCurrently, this ramp is the same in all images processed."),Object(l.b)("p",null,"  We also generate an auxiliary ",Object(l.b)("inlineCode",{parentName:"p"},"xml")," with geographic information to handle this\nimage on GIS environments. You just need to append the ",Object(l.b)("inlineCode",{parentName:"p"},'".aux.xml"')," string to the png url."))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"get-a-files-units"},"Get a file's units"),Object(l.b)("p",null,"\xa0",Object(l.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(l.b)("inlineCode",{parentName:"p"},"/files/{id}/units")),Object(l.b)("p",null,"Gets the file's properties and their units."),Object(l.b)(b.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/units'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/units'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(l.b)(i.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/units'\n"))),Object(l.b)(i.a,{value:"json",mdxType:"TabItem"},Object(l.b)("p",null,"  Returns a JSON like the following:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "distance": "ft",\n    "heading": "arcdeg",\n    "speed": "mi/hr",\n    "elevation": "ft",\n    "harvestMoisture": "prcnt",\n    "wetMass": "lb",\n    "yieldVolume": "bu",\n    "equipmentWidth": "ft"\n}\n')),Object(l.b)("p",null,"These properties vary depending on the operationType, but you can expect the same,\nstandardized keys, across different providers."),Object(l.b)("p",null,"Units usually don't change for the same Leaf User, since the providers units\nconfiguration is based on their location. But keep in mind that it's best to\nalways take the units into consideration, just to be sure."))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"upload-a-file"},"Upload a file"),Object(l.b)("p",null,"\xa0",Object(l.b)("span",{class:"badge badge--warning"},"POST")," ",Object(l.b)("inlineCode",{parentName:"p"},"/files")),Object(l.b)("p",null,"Posts/creates a new file in Leaf. The file must be sent as a zip."),Object(l.b)("p",null,"This endpoint receives three URL parameters, one of them is optional."),Object(l.b)("p",null,"A ",Object(l.b)("inlineCode",{parentName:"p"},"leafUserId"),", ",Object(l.b)("inlineCode",{parentName:"p"},"provider")," and ",Object(l.b)("inlineCode",{parentName:"p"},"fileFormat")," (optional). "),Object(l.b)("p",null,"When you are sure which provider a file came from and that if there are multiple\nfiles they belong to the same operations, you can add the ",Object(l.b)("inlineCode",{parentName:"p"},"fileFormat"),", that\nmust be one of the following:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"ADAPTADM\nCN1\nDATCLIMATE\nGEOJSON\nISO11783\nSHAPEFILE\nTRIMBLE\n")),Object(l.b)("p",null,"Along with the ",Object(l.b)("inlineCode",{parentName:"p"},"fileFormat"),", a ",Object(l.b)("inlineCode",{parentName:"p"},"provider")," must be set and be one of the following:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"Leaf\nClimateFieldView\nCNHI\nJohnDeere\nTrimble\n")),Object(l.b)("p",null,"When unsure about the format or when there can be more than one format in the same\nzip, you can use our generic uploader and Leaf will detect the files present.\nFor that, set ",Object(l.b)("inlineCode",{parentName:"p"},"provider")," to ",Object(l.b)("inlineCode",{parentName:"p"},"Leaf")," and don't include ",Object(l.b)("inlineCode",{parentName:"p"},"fileFormat"),".\nLeaf will detect files present in a number of different ways and hierarchies and\ncreate/return one file id for each detection. This is very important because it's\nslightly different than when uploading a zip file you are sure refers to the\nsame operation and same provider, creating only one file even if the zip contains\nmultiple files for the same operation."),Object(l.b)(b.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files'\n\nconst headers = {\n  'Authorization': `Bearer ${TOKEN}`\n  'Content-Type': 'multipart/form-data'\n}\n\nconst params = {\n  fileFormat: 'SHAPEFILE',\n  provider: 'JohnDeere',\n  leafUserId: 'id'\n}\n\nconst form = new FormData()\nform.append('file', 'shapefile.zip')\n\naxios.post(endpoint, form, { headers, params })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nfiles = {'file': open('shapefile.zip')}\nparams = {\n  'fileFormat': 'SHAPEFILE',\n  'provider': 'JohnDeere',\n  'leafUserId': 'id'\n}\n\nresponse = requests.post(endpoint, headers=headers, files=files, params=params)\nprint(response.json())\n"))),Object(l.b)(i.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -F 'file=shapefile.zip' \\\n    'https://api.withleaf.io/services/operations/api/files?' \\\n    'fileFormat=SHAPEFILE&provider=JohnDeere&leafUserId=id'\n"))),Object(l.b)(i.a,{value:"json",mdxType:"TabItem"},Object(l.b)("p",null,"  Returns a single JSON object:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "message": "Your file is being processed and will be available in a few minutes",\n  "ids": [\n      "file_id_1",\n      "file_id_2",\n      "file_id_...",\n      "file_id_n",\n  ]\n}\n')))),Object(l.b)("p",null,"After a few minutes, you can query each of the files individually on\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#get-a-file"}),"Get a File")," or all of them, filtering by ",Object(l.b)("inlineCode",{parentName:"p"},"createdDate"),", on\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#get-all-files"}),"Get all Files"),"."),Object(l.b)("hr",null),Object(l.b)("h3",{id:"merge-files"},"Merge files"),Object(l.b)("p",null,"\xa0",Object(l.b)("span",{class:"badge badge--warning"},"POST")," ",Object(l.b)("inlineCode",{parentName:"p"},"/files/merge")),Object(l.b)("p",null,"Posts a merge operation to our server."),Object(l.b)("p",null,"A merge operation is performed asynchronously. This call will return immediately\nwith the newly created file entry, but at this point, the file is not already\nprocessed and available. You will need to make a new ",Object(l.b)("inlineCode",{parentName:"p"},"GET /files")," request for the\nnew id and check the status. A status value of ",Object(l.b)("inlineCode",{parentName:"p"},"processed")," means the file is\ndone merging."),Object(l.b)("p",null,"A merge process has some validations, the files passed must belong to\nthe same ",Object(l.b)("inlineCode",{parentName:"p"},"leafUserId"),", be of the same operation type and have the status as ",Object(l.b)("inlineCode",{parentName:"p"},"processed"),".\nIf any of those filters fail, the endpoint will result in HTTP 400 error."),Object(l.b)("p",null,"It receives a single JSON object with the ",Object(l.b)("inlineCode",{parentName:"p"},"ids")," entry. Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "ids": [ "id1", "id2", "so on" ]\n}\n')),Object(l.b)(b.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"js",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/merge'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = { ids: [ 'id1', 'id2' ] }\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(l.b)(i.a,{value:"py",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/merge'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {'ids': ['id1', 'id2']}\n\nresponse = requests.post(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(l.b)(i.a,{value:"sh",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ \"ids\": [ \"id1\", \"id2\" ] }'\n    'https://api.withleaf.io/services/operations/api/files/merge'\n"))),Object(l.b)(i.a,{value:"json",mdxType:"TabItem"},Object(l.b)("p",null,"  Returns a single JSON object:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "id",\n  "status": "SENT_TO_MERGE"\n}\n')),Object(l.b)("p",null,"  After a few minutes, you can consult the result of Leaf processing over this file by\nperforming GET consults in this."))),Object(l.b)("h2",{id:"rest-resources"},"REST Resources"),Object(l.b)("p",null,"See below the REST resources and their endpoints."),Object(l.b)("h3",{id:"operation-file-summary-resource"},"Operation File Summary Resource"),Object(l.b)("p",null,"Leaf returns operation file summaries in a standardized format. Summaries use the point data to derive basic information about the operation and include links to the original files and images of an operation.Naturally, different\ntypes of operations contain different properties. For instance, an ",Object(l.b)("inlineCode",{parentName:"p"},"applied"),"\noperation will contain ",Object(l.b)("inlineCode",{parentName:"p"},"appliedRate"),", whereas a ",Object(l.b)("inlineCode",{parentName:"p"},"harvested")," operation will\ncontain ",Object(l.b)("inlineCode",{parentName:"p"},"wetMass")," and other Yield properties. The resource below shows a typical return. A list of\nall properties is available here."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "id": "f505092b-ab8f-4d87-a4b6-92cccb6b2515",\n    "fileName": "new_test_data.zip",\n    "provider": "Leaf",\n    "fileFormat": "DATCLIMATE",\n    "originalFile": "URL (String)",\n    "rawGeojson": "URL (String)",\n    "standardGeojson": "URL (String)",\n    "zippedPNGs": "URL (String)",\n    "leafUserId": "UUID",\n    "apiOwnerUsername": "email (String)",\n    "summary": {\n        "type": "Feature",\n        "properties": {\n            "property1": {\n                "average": float,\n                "standardDeviation": float,\n                "min": float,\n                "max": float\n            },\n            "property2": {\n                "average": float,\n                "standardDeviation": float,\n                "min": float,\n                "max": float\n            },\n            "propertyn": {\n                "average": float,\n                "standardDeviation": float,\n                "min": float,\n                "max": float\n            },\n            "crop": [\n                "String"\n            ],\n            "operationType": "String",\n            "totalArea": float\n        },\n        "geometry": {\n            "type": "MultiPolygon",\n            "coordinates": [[[\n              [-89.832583, 39.719780, 194.9],\n              [-89.832588, 39.719780, 194.9],\n              [-89.832519, 39.719806, 195.0],\n              [-89.832578, 39.719781, 195.0],\n              [-89.832583, 39.719780, 194.9]\n            ]]]\n        }\n    },\n    "sourceFiles": [],\n    "status": "processed, processing or failed",\n    "origin": "provider, uploaded, merged or automerged",\n    "createdTime": "ISO 8601 date",\n    "operationStartTime": "ISO 8601 date",\n    "operationEndTime": "ISO 8601 date"\n}\n')),Object(l.b)("p",null,'An operation returned by Leaf can be an individual file or contain multiple\nindividual files (uploaded, merged or uploaded).\nIf the operation contains more than one individual file, another key is added to\nthe resource, the "sources" key, that is a list of individual file ids.'),Object(l.b)("h3",{id:"standard-geojson-resource"},"Standard Geojson Resource"),Object(l.b)("p",null,'Each operation file returns with a "standardgeojson" URL that allows you to download a full point dataset from the operation in a standardized geojson format. Below is an example of the format of each point in these files.'),Object(l.b)(b.a,{defaultValue:"planted",values:[{label:"Planted",value:"planted"},{label:"Applied",value:"applied"},{label:"Harvested",value:"harvested"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"planted",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "geometry": {\n    "type": "Point",\n    "coordinates": \n    [\n      -74.83762110788625,\n      28.686604864693564\n    ]\n  },\n  "properties": {\n    "distance": "float",\n    "heading": "float",\n    "speed": "float",\n    "elevation": "float",\n    "harvestMoisture": "float",\n    "equipmentWidth": "float",\n    "recordingStatus": "string",\n    "machinery": ["string"],\n    "sectionId" : "int",\n    "timestamp": "string",\n    "operationType": "planted",\n    "crop": "string",\n    "variety": "string",\n    "area": "float",\n    "seedRate": "int",\n    "seedRateTarget": "int",\n    "seedDepth": "float",\n  }\n}\n'))),Object(l.b)(i.a,{value:"applied",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "geometry": {\n    "type": "Point",\n    "coordinates": \n    [\n      -74.83762110788625,\n      28.686604864693564\n    ]\n  },\n  "properties": {\n    "distance": "float",\n    "heading": "float",\n    "speed": "float",\n    "elevation": "float",\n    "equipmentWidth": "float",\n    "recordingStatus": "string",\n    "machinery": ["string"],\n    "sectionId" : "int",\n    "timestamp": "string",\n    "operationType": "applied",\n    "crop": "string",\n    "area": "float",\n    "products": {\n      "type": "string",\n      "description": "string"\n    },\n    "appliedRate": "float",\n    "appliedRateTarget": "float",\n  }\n}\n'))),Object(l.b)(i.a,{value:"harvested",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "geometry": {\n    "type": "Point",\n    "coordinates": \n    [\n      -74.83762110788625,\n      28.686604864693564\n    ]\n  },\n  "properties": {\n    "distance": "float",\n    "heading": "float",\n    "speed": "float",\n    "elevation": "float",\n    "harvestMoisture": "float",\n    "equipmentWidth": "float",\n    "recordingStatus": "string",\n    "machinery": ["string"],\n    "sectionId" : "int",\n    "timestamp": "string",\n    "operationType": "harvested",\n    "crop": "string",\n    "variety": "string",\n    "area": "float",\n    "wetMass": "float",\n    "wetVolume": "float",\n    "wetMassPerArea": "float",\n    "wetVolumePerArea": "float",\n    "dryMass": "float",\n    "dryVolume": "float",\n    "dryMassPerArea": "float",\n    "dryVolumePerArea": "float"\n  }\n}\n')))),Object(l.b)("h2",{id:"list-of-properties"},"List of properties"),Object(l.b)("p",null,"Below is the list of all properties. When the data is present in the original\nfile, Leaf standardizes names (and units) to create the standardGeojson, the\nsummary and, when applicable, images for those properties. "),Object(l.b)("p",null,"Below we list all the properties in the standardGeojson and summary separately,\nsince there are different properties present."),Object(l.b)("h3",{id:"summary-properties"},"Summary properties"),Object(l.b)("p",null,'Select the tab you want to see "planted", "applied" or "harvested"'),Object(l.b)(b.a,{defaultValue:"planted",values:[{label:"Planted",value:"planted"},{label:"Applied",value:"applied"},{label:"Harvested",value:"harvested"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"planted",mdxType:"TabItem"},Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"key"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"presence"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"crop"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seedRate"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'string "planted"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"totalArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int (square meters)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"elevation"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variety"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seedRateTarget"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seedDepth"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"machinery"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of strings")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"speed"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"totalPlanted"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int (number of seeds)")))),Object(l.b)("p",null,'  note: the dict properties will always contain a "min", "max", "avg" and "unit"\nkey inside it, like the following example:'),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"seedRate": {\n    "min": 123,\n    "max": 140,\n    "avg": 126,\n    "unit": "seeds/ac"\n}\n'))),Object(l.b)(i.a,{value:"applied",mdxType:"TabItem"},Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"key"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"presence"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appliedRate"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"applied")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"elevation"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"totalArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int (square meters)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"products"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appliedRateTarget"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"machinery"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of strings")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"speed"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"totalApplied"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float")))),Object(l.b)("p",null,'  note: "products" dict contains one dict for every product used. Every product\ndict contains "minRate", "maxRate", "avgRate", "unit" and "description" like\nshown below:'),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"products": {\n    "28-0-0 UAN": {\n        "minRate": 13.0,\n        "maxRate": 15.0,\n        "avgRate": 14.0,\n        "unit":"gal/ac",\n        "description": ""\n    },\n    "Agrotain Plus": {\n        "minRate": 1.1, \n        "maxRate": 1.3,\n        "avgRate": 1.23,         \n        "unit": "lb/ac",\n        "description": ""\n    }\n}\n')),Object(l.b)("p",null,'  note: with the exception of "products", all the dict properties contain "min",\n"max", "avg" and "unit" key inside it, like the following example:'),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"appliedRate": {\n    "min": 123.0,\n    "max": 140.0,\n    "avg": 126.0,\n    "unit": "gal/ac or l/ha"\n},\n'))),Object(l.b)(i.a,{value:"harvested",mdxType:"TabItem"},Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"key"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"presence"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"elevation"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"harvestMoisture"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"harvested")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"totalArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int (square meters)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetMass"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetMassPerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetVolume"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetVolumePerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"totalWetVolume"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"totalWetMass"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"crop"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"always present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryMass"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryMassPerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryVolume"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryVolumePerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"speed"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variety"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"machinery"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"mostly present"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of strings")))),Object(l.b)("p",null,'  note: the dict properties will always contain a "min", "max", "avg" and "unit"\nkey inside it, like the following example:'),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"harvestMoisture": {\n  "min": 17.0,\n  "max": 18.0,\n  "avg": 17.3,\n  "unit": "percentage"\n}\n')))),Object(l.b)("h3",{id:"standard-geojson-properties"},"Standard GEOJSON properties"),Object(l.b)(b.a,{defaultValue:"planted",values:[{label:"Planted",value:"planted"},{label:"Applied",value:"applied"},{label:"Harvested",value:"harvested"}],mdxType:"Tabs"},Object(l.b)(i.a,{value:"planted",mdxType:"TabItem"},Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"key"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"presence"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example units"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"coords"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Point (x,y)"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Point (x,y)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"timestamp"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date, complete and with Z. example: 2011-10-05T14:48:00.000Z")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"crop"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Crop type (normalized)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"area"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft\xb2 or m\xb2"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Area represented by point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"heading"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"degrees"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Heading of machine at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"distance"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Distance travelled since previous point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"elevation"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Distance to sea level")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'string "planted"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"equipmentWidth"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Width of implement")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"recordingStatus"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Recording status of machine at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seedRate"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seeds/m\xb2 or seeds/ac"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The rate of seeds planted at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variety"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The variety of seed being planted")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"speed"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft/s or m/s"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Speed of machine at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sectionId"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ID of implement sensor section")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"machinery"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of strings"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"name of machine & implement")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seedRateTarget"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seeds/m\xb2 or seeds/ac"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The target rate of seeds to be planted at the point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"seedDepth"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cm"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The depth at which seeds were planted at point"))))),Object(l.b)(i.a,{value:"applied",mdxType:"TabItem"},Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"key"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"presence"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example units"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"coords"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Point (x,y)"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Point (x,y)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"distance"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Distance travelled since previous point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"heading"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Heading of machine at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"elevation"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Distance to sea level")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"area"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft\xb2 or m\xb2"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Area represented by point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appliedRate"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fl.oz/ac or L/m\xb2"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The amount of product being applied at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"recordingStatus"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Recording status of machine")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"timestamp"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date, complete and with Z. example: 2011-10-05T14:48:00.000Z")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'string "applied"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"products"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dict"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"tank mix including products and ratio")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"equipmentWidth"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Width of implement")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"speed"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft/s or m/s"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Speed of machine at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appliedRateTarget"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fl.oz/ac or L/m\xb2"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The target amount of product to be applied at the point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"machinery"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of strings"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Name of machine and implement")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sectionId"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ID of implement sensor section"))))),Object(l.b)(i.a,{value:"harvested",mdxType:"TabItem"},Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"key"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"presence"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example units"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"coords"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Point (x,y)"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Point x,y")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"timestamp"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 date, complete and with Z. example: 2011-10-05T14:48:00.000Z")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"crop"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Crop type (normalized)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"area"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft\xb2 or m\xb2"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Area represented by point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"distance"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Distance travelled since previous point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"elevation"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Distance to sea level")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'string "harvested"')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"equipmentWidth"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft or m"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Width of implement")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"recordingStatus"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boolean"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Recording status of machine")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"harvestMoisture"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"%"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetMass"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"lb or kg"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wet mass harvested in that point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetMassPerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"lb/ac or kg/ha"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wet mass harvested in that point divided by area")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetVolume"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bu or L"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wet volume harvested in that point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wetVolumePerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"*"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bu/ac or L/ha"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"wet volume harvested in that point divided by area")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variety"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The variety of seed being harvested")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"speed"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ft/s or m/s"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Speed of machine at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"heading"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"degrees"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Heading of machine at point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"machinery"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"name of machine & implement")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryMass"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"lb or kg"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dry mass harvested in that point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryMassPerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"lb/ac or kg/ha"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dry mass harvested in that point divided by area")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryVolume"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bu or L"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dry volume harvested in that point")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dryVolumePerArea"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"float"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bu/ac or L/ha"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dry volume harvested in that point divided by area")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sectionId"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"**"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"int"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ID of implement sensor section")))))),Object(l.b)("p",null,"*"," = Always in response",Object(l.b)("br",{parentName:"p"}),"\n","*","*"," = Usually in response but not required."))}d.isMDXComponent=!0},95:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),o=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=o(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,b=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=o(a),O=n,j=s["".concat(b,".").concat(O)]||s[O]||d[O]||l;return a?r.a.createElement(j,i(i({ref:t},p),{},{components:a})):r.a.createElement(j,i({ref:t},p))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,b=new Array(l);b[0]=O;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,b[1]=i;for(var p=2;p<l;p++)b[p]=a[p];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"},96:function(e,t,a){"use strict";var n=a(0),r=a(20);t.a=function(){var e=Object(n.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},97:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}},98:function(e,t,a){"use strict";a.d(t,"b",(function(){return l})),a.d(t,"a",(function(){return b}));var n=a(96),r=a(103);function l(){var e=Object(n.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,a=void 0===t?"/":t,l=e.url;return{withBaseUrl:function(e,t){return function(e,t,a,n){var l=void 0===n?{}:n,b=l.forcePrependBaseUrl,i=void 0!==b&&b,c=l.absolute,p=void 0!==c&&c;if(!a)return a;if(a.startsWith("#"))return a;if(Object(r.b)(a))return a;if(i)return t+a;var o=!a.startsWith(t)?t+a.replace(/^\//,""):a;return p?e+o:o}(l,a,e,t)}}}function b(e,t){return void 0===t&&(t={}),(0,l().withBaseUrl)(e,t)}},99:function(e,t,a){"use strict";var n=a(0),r=Object(n.createContext)(void 0);t.a=r}}]);
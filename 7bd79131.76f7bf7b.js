(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{100:function(e,t,n){"use strict";var a=n(0),r=Object(a.createContext)(void 0);t.a=r},101:function(e,t,n){"use strict";var a=n(0),r=n(100);t.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},102:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(101),s=n(98),l=n(48),o=n.n(l),b=37,c=39;t.a=function(e){var t=e.block,n=e.children,l=e.defaultValue,p=e.values,d=e.groupId,u=Object(i.a)(),m=u.tabGroupChoices,O=u.setTabGroupChoices,j=Object(a.useState)(l),f=j[0],h=j[1],g=Object(a.useState)(!1),N=g[0],v=g[1];if(null!=d){var y=m[d];null!=y&&y!==f&&p.some((function(e){return e.value===y}))&&h(y)}var T=function(e){h(e),null!=d&&O(d,e)},w=[],E=function(e){e.metaKey||e.altKey||e.ctrlKey||v(!0)},x=function(){v(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",E),window.addEventListener("mousedown",x)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":t})},p.map((function(e){var t=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===t,className:Object(s.a)("tabs__item",o.a.tabItem,{"tabs__item--active":f===t}),style:N?{}:{outline:"none"},key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case c:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case b:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e),E(e)},onFocus:function(){return T(t)},onClick:function(){T(t),v(!1)},onPointerDown:function(){return v(!1)}},n)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter((function(e){return e.props.value===f}))[0]))}},103:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){return r.a.createElement("div",null,e.children)}},104:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r}))},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),i=(n(0),n(96)),s=n(102),l=n(103),o=(n(99),{title:"Endpoints"}),b={unversionedId:"operations_endpoints",id:"operations_endpoints",isDocsHomePage:!1,title:"Endpoints",description:"[1]//github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection",source:"@site/docs/operations_endpoints.md",permalink:"/docs/docs/operations_endpoints",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/operations_endpoints.md",sidebar:"docs",previous:{title:"Overview",permalink:"/docs/docs/operations_overview"},next:{title:"Sample responses",permalink:"/docs/docs/operations_sample_output"}},c=[{value:"About",id:"about",children:[]},{value:"Endpoints",id:"endpoints",children:[{value:"Get all files",id:"get-all-files",children:[]},{value:"Get a file",id:"get-a-file",children:[]},{value:"Get a file summary",id:"get-a-file-summary",children:[]},{value:"Get a file&#39;s images",id:"get-a-files-images",children:[]},{value:"Get a file&#39;s units",id:"get-a-files-units",children:[]},{value:"Upload a file",id:"upload-a-file",children:[]},{value:"Merge files",id:"merge-files",children:[]}]}],p={rightToc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"about"},"About"),Object(i.b)("p",null,"All HTTP methods should be prepended by this service's endpoint:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"https://api.withleaf.io/services/operations/api\n")),Object(i.b)("p",null,"This service has the following endpoints available:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-all-files"}),"Get all files")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-a-file"}),"Get a file")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-a-file-summary"}),"Get a file summary")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}/summary"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-a-files-images"}),"Get a file's images")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}/images"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-a-files-images"}),"Get a file's units")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/{id}/units"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#upload-a-file"}),"Upload a file")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#merge-files"}),"Merge files")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/files/merge"))))),Object(i.b)("h2",{id:"endpoints"},"Endpoints"),Object(i.b)("p",null,"Here we list all the available endpoints from this microservice. For easily\ntesting it, we recommend to see our Postman ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection"}),"collection"),"."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"requires Leaf User with credentials")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"To have access to operation files, you will need a Leaf User with valid credentials\nfrom the provider you want to access data. If you don't have a Leaf User or you\nhave not connected it with any provider yet, see ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("a",Object(a.a)({parentName:"strong"},{href:""}),"how to create a Leaf User")),"\nor ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("a",Object(a.a)({parentName:"strong"},{href:""}),"how to add credentials to a Leaf User")),"."))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-all-files"},"Get all files"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files")),Object(i.b)("p",null,"Gets a paged list of files that belong to the current logged in user. It is\npossible to filter the results by passing some query parameters. They are listed\nbelow."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"leafUserId")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"uuid of one of your users")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"provider")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"CNHI"),", ",Object(i.b)("inlineCode",{parentName:"td"},"JohnDeere"),", ",Object(i.b)("inlineCode",{parentName:"td"},"Trimble"),", ",Object(i.b)("inlineCode",{parentName:"td"},"ClimateFieldView")," or ",Object(i.b)("inlineCode",{parentName:"td"},"Leaf"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"status")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"processed"),", ",Object(i.b)("inlineCode",{parentName:"td"},"failed")," or ",Object(i.b)("inlineCode",{parentName:"td"},"processing"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"origin")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"provider"),", ",Object(i.b)("inlineCode",{parentName:"td"},"automerged"),", ",Object(i.b)("inlineCode",{parentName:"td"},"merged")," or ",Object(i.b)("inlineCode",{parentName:"td"},"uploaded"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"organizationId")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"the provider organizationId (only available for John Deere)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"createdTime")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations from the createdTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"operationStartTime")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations from the operationStartTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"operationEndTime")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"ISO 8601 date. Returns operations until the operationEndTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"operationType")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"applied"),", ",Object(i.b)("inlineCode",{parentName:"td"},"planted")," or ",Object(i.b)("inlineCode",{parentName:"td"},"harvested"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"minArea")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"a number (Double) representing the minimum area (square meters) of the operations to be returned")))),Object(i.b)("p",null,"You can also pass some parameters used exclusively for paging through results.\nThey are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page")),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(l.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(l.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files'\n"))),Object(i.b)(l.a,{value:"json",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n       "id": "11e8df30-df5c-4373-8dc1-fb275cdd3ea4",\n       "provider": "ClimateFieldView",\n       "sizeInBytes": 24249,\n       "originalFile": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/19e9fe2e-399c-4735-b4b1-9b052840e2f5.zip",\n       "standardGeojson": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/14aa028a-72f0-473a-8fc8-e2b3edef7c3f.json",\n       "leafUserId": "1f351aa6-c05a-473a-89ba-d63a87d9b302",\n       "apiOwnerUsername": "leafdemos",\n       "status": "processed",\n       "origin": "provider",\n       "createdTime": "2020-10-29T19:44:57.723",\n       "operationStartTime": "2019-04-29T00:24:52.084",\n       "operationEndTime": "2019-04-29T00:43:03.276",\n       "summary": {\n           "type": "Feature",\n           "properties": {\n               "totalDistance": 10900.947723655045,\n               "speed": {\n                   "average": 10.33722442338795,\n                   "standardDeviation": 1.5361860364425932,\n                   "min": 0.3355403244495392,\n                   "max": 11.497848510742188\n               },\n               "elevation": {\n                   "average": 3577.9168289290683,\n                   "standardDeviation": 0.6729413774132946,\n                   "min": 3576.9,\n                   "max": 3578.9\n               },\n               "varieties": [\n                   "28-0-0 uan @ 160 lb/ac",\n                   "agrotain advanced @ 2.5 gal/ac",\n                   "bicep ii magnum @ 32 fl oz/ac",\n                   "fs optique @ 20 fl oz/ac",\n                   "roundup powermax (usa) @ 16 fl oz/ac",\n                   "sharpen powered by kixor @ 1 fl oz/ac"\n               ],\n               "appliedRate": {\n                   "average": 14.757733806861584,\n                   "standardDeviation": 0.3157623349195758,\n                   "min": 13.899999643744623,\n                   "max": 15.599999476023033\n               },\n               "operationType": "applied",\n               "totalArea": 319471.8942196931,\n               "machineSpecification": {\n                   "machineDescription": "Agco Rogator RG1300",\n                   "implementDescription": "Sprayer",\n                   "implementWidth": 1440.0000000000002\n               }\n           },\n           "geometry": {\n               "type": "MultiPolygon",\n               "coordinates": [\n                   [\n                       [\n                           [-89.83382833, 39.71963950, 3578.8],\n                           [-89.83443583, 39.71966733, 3578.8],\n                           [-89.83452050, 39.71968466, 3578.6],\n                           [-89.83451283, 39.72648850, 3577.8],\n                           [-89.83010300, 39.72748950, 3577.2],\n                           [-89.83005766, 39.72749950, 3577.2],\n                           [-89.83001900, 39.72750716, 3577.2],\n                           [-89.82999183, 39.72751166, 3577.3],\n                           [-89.82997116, 39.72751383, 3577.3],\n                           [-89.82993383, 39.72020166, 3578.6],\n                           [-89.82993866, 39.71975133, 3578.2],\n                           [-89.82996366, 39.71968966, 3578.1],\n                           [-89.83382833, 39.71963950, 3578.8]\n                       ]\n                   ]\n               ]\n           }\n       },\n       "sourceFiles": []\n   },\n  ...\n]\n')),Object(i.b)("p",null,"  The ",Object(i.b)("inlineCode",{parentName:"p"},"sourceFiles")," entry in this JSON response is a list of files' ids that were\nused to create the file. It will appear only in ",Object(i.b)("em",{parentName:"p"},'"merge"')," and ",Object(i.b)("em",{parentName:"p"},'"automerged"')," files."))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-file"},"Get a file"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}")),Object(i.b)("p",null,"Gets a single file by its id."),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(l.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(l.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}'\n"))),Object(i.b)(l.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,'  This is a sample response of "applied" operation type'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n     "id": "11e8df30-df5c-4373-8dc1-fb275cdd3ea4",\n     "provider": "ClimateFieldView",\n     "sizeInBytes": 24249,\n     "originalFile": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/19e9fe2e-399c-4735-b4b1-9b052840e2f5.zip",\n     "standardGeojson": "https://climate-prd-bucket-etko4ab64ih6.s3.us-west-2.amazonaws.com/14aa028a-72f0-473a-8fc8-e2b3edef7c3f.json",\n     "leafUserId": "1f351aa6-c05a-473a-89ba-d63a87d9b302",\n     "apiOwnerUsername": "leafdemos",\n     "status": "processed",\n     "origin": "provider",\n     "createdTime": "2020-10-29T19:44:57.723",\n     "operationStartTime": "2019-04-29T00:24:52.084",\n     "operationEndTime": "2019-04-29T00:43:03.276",\n     "summary": {\n         "type": "Feature",\n         "properties": {\n             "totalDistance": 10900.947723655045,\n             "speed": {\n                 "average": 10.33722442338795,\n                 "standardDeviation": 1.5361860364425932,\n                 "min": 0.3355403244495392,\n                 "max": 11.497848510742188\n             },\n             "elevation": {\n                 "average": 3577.9168289290683,\n                 "standardDeviation": 0.6729413774132946,\n                 "min": 3576.9,\n                 "max": 3578.9\n             },\n             "varieties": [\n                 "28-0-0 uan @ 160 lb/ac",\n                 "agrotain advanced @ 2.5 gal/ac",\n                 "bicep ii magnum @ 32 fl oz/ac",\n                 "fs optique @ 20 fl oz/ac",\n                 "roundup powermax (usa) @ 16 fl oz/ac",\n                 "sharpen powered by kixor @ 1 fl oz/ac"\n             ],\n             "appliedRate": {\n                 "average": 14.757733806861584,\n                 "standardDeviation": 0.3157623349195758,\n                 "min": 13.899999643744623,\n                 "max": 15.599999476023033\n             },\n             "operationType": "applied",\n             "totalArea": 319471.8942196931,\n             "machineSpecification": {\n                 "machineDescription": "Agco Rogator RG1300",\n                 "implementDescription": "Sprayer",\n                 "implementWidth": 1440.0000000000002\n             }\n         },\n         "geometry": {\n             "type": "MultiPolygon",\n             "coordinates": [\n                 [\n                     [\n                         [-89.83382833, 39.71963950, 3578.8],\n                         [-89.83443583, 39.71966733, 3578.8],\n                         [-89.83452050, 39.71968466, 3578.6],\n                         [-89.83451283, 39.72648850, 3577.8],\n                         [-89.83010300, 39.72748950, 3577.2],\n                         [-89.83005766, 39.72749950, 3577.2],\n                         [-89.83001900, 39.72750716, 3577.2],\n                         [-89.82999183, 39.72751166, 3577.3],\n                         [-89.82997116, 39.72751383, 3577.3],\n                         [-89.82993383, 39.72020166, 3578.6],\n                         [-89.82993866, 39.71975133, 3578.2],\n                         [-89.82996366, 39.71968966, 3578.1],\n                         [-89.83382833, 39.71963950, 3578.8]\n                     ]\n                 ]\n             ]\n         }\n     },\n     "sourceFiles": []\n }\n')))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-file-summary"},"Get a file summary"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}/summary")),Object(i.b)("p",null,"Gets the summary, if available, for the file id."),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/summary'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(l.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/summary'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(l.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/summary'\n"))),Object(i.b)(l.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a single ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://tools.ietf.org/html/rfc7946"}),"GeoJSON")," feature containing the convex hull of all operation\ndata and some statistics calculated from it."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "type": "Feature",\n    "properties": {\n        "totalDistance": 10900.947723655045,\n        "speed": {\n            "average": 10.33722442338795,\n            "standardDeviation": 1.5361860364425932,\n            "min": 0.3355403244495392,\n            "max": 11.497848510742188\n        },\n        "elevation": {\n            "average": 3577.9168289290683,\n            "standardDeviation": 0.6729413774132946,\n            "min": 3576.9,\n            "max": 3578.9\n        },\n        "varieties": [\n            "28-0-0 uan @ 160 lb/ac",\n            "agrotain advanced @ 2.5 gal/ac",\n            "bicep ii magnum @ 32 fl oz/ac",\n            "fs optique @ 20 fl oz/ac",\n            "roundup powermax (usa) @ 16 fl oz/ac",\n            "sharpen powered by kixor @ 1 fl oz/ac"\n        ],\n        "appliedRate": {\n            "average": 14.757733806861584,\n            "standardDeviation": 0.3157623349195758,\n            "min": 13.899999643744623,\n            "max": 15.599999476023033\n        },\n        "operationType": "applied",\n        "totalArea": 319471.8942196931,\n        "machineSpecification": {\n            "machineDescription": "Agco Rogator RG1300",\n            "implementDescription": "Sprayer",\n            "implementWidth": 1440.0000000000002\n        }\n    },\n    "geometry": {\n        "type": "MultiPolygon",\n        "coordinates": [\n            [\n                [\n                    [-89.83382833, 39.71963950, 3578.8],\n                    [-89.83443583, 39.71966733, 3578.8],\n                    [-89.83452050, 39.71968466, 3578.6],\n                    [-89.83451283, 39.72648850, 3577.8],\n                    [-89.83010300, 39.72748950, 3577.2],\n                    [-89.83005766, 39.72749950, 3577.2],\n                    [-89.83001900, 39.72750716, 3577.2],\n                    [-89.82999183, 39.72751166, 3577.3],\n                    [-89.82997116, 39.72751383, 3577.3],\n                    [-89.82993383, 39.72020166, 3578.6],\n                    [-89.82993866, 39.71975133, 3578.2],\n                    [-89.82996366, 39.71968966, 3578.1],\n                    [-89.83382833, 39.71963950, 3578.8]\n                ]\n            ]\n        ]\n    }\n}\n')))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-files-images"},"Get a file's images"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}/images")),Object(i.b)("p",null,"Gets a list of PNG images generated from the operation's file properties."),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/images'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(l.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/images'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(l.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/images'\n"))),Object(i.b)(l.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a JSON list of the following format:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "property": "elevation",\n    "ramp": {\n      "0%":   [200,   0, 0],\n      "35%":  [255,  40, 0],\n      "45%":  [255, 150, 0],\n      "55%":  [255, 240, 0],\n      "65%":  [  0, 230, 0],\n      "75%":  [  0, 190, 0],\n      "100%": [  0, 130, 0],\n      "nv":   [  0,   0, 0, 0]\n    },\n    "url": "string"\n  },\n  ...\n]\n')),Object(i.b)("p",null,"  The ",Object(i.b)("inlineCode",{parentName:"p"},"property")," refers to the property extracted from files' data to generate the\nimage. In the example above, the image would represent the elevation."),Object(i.b)("p",null,"  The ",Object(i.b)("inlineCode",{parentName:"p"},"ramp")," is the color ramp used to generate the image. The percentages\ncorrespond to the minimum (0%) and maximum (100%) values in the image. The\nlisted values correspond to RGB values used. The ",Object(i.b)("inlineCode",{parentName:"p"},"nv")," refers to ",Object(i.b)("inlineCode",{parentName:"p"},"no value"),". It\nis used internally to make the image transparent on places without data.\nCurrently, this ramp is the same in all images processed."),Object(i.b)("p",null,"  We also generate an auxiliary ",Object(i.b)("inlineCode",{parentName:"p"},"xml")," with geographic information to handle this\nimage on GIS environments. You just need to append the ",Object(i.b)("inlineCode",{parentName:"p"},'".aux.xml"')," string to the png url."))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"get-a-files-units"},"Get a file's units"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET"),"  ",Object(i.b)("inlineCode",{parentName:"p"},"/files/{id}/units")),Object(i.b)("p",null,"Gets the file's properties and their units."),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/{id}/units'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(l.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/{id}/units'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(l.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/operations/api/files/{id}/units'\n"))),Object(i.b)(l.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a JSON like the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "distance": "ft",\n    "heading": "arcdeg",\n    "speed": "mi/hr",\n    "elevation": "ft",\n    "harvestMoisture": "prcnt",\n    "wetMass": "lb",\n    "yieldVolume": "bu",\n    "equipmentWidth": "ft"\n}\n')),Object(i.b)("p",null,"These properties vary depending on the operationType, but you can expect the same,\nstandardized keys, across different providers."),Object(i.b)("p",null,"Units usually don't change for the same Leaf User, since the providers units\nconfiguration is based on their location. But keep in mind that it's best to\nalways take the units into consideration, just to be sure."))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"upload-a-file"},"Upload a file"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/files")),Object(i.b)("p",null,"Posts/creates a new file in our server."),Object(i.b)("p",null,"This endpoint receives three required query parameters. A ",Object(i.b)("inlineCode",{parentName:"p"},"leafUserId"),", ",Object(i.b)("inlineCode",{parentName:"p"},"fileFormat")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"provider"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"fileFormat")," must be one of the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"ADAPTADM\nCN1\nDATCLIMATE\nGEOJSON\nISO11783\nSHAPEFILE\nTRIMBLE\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"provider")," must be one of the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Leaf\nClimateFieldView\nCNHI\nJohnDeere\nTrimble\n")),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files'\n\nconst headers = {\n  'Authorization': `Bearer ${TOKEN}`\n  'Content-Type': 'multipart/form-data'\n}\n\nconst params = {\n  fileFormat: 'SHAPEFILE',\n  provider: 'JohnDeere',\n  leafUserId: 'id'\n}\n\nconst form = new FormData()\nform.append('file', 'shapefile.zip')\n\naxios.post(endpoint, form, { headers, params })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(l.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nfiles = {'file': open('shapefile.zip')}\nparams = {\n  'fileFormat': 'SHAPEFILE',\n  'provider': 'JohnDeere',\n  'leafUserId': 'id'\n}\n\nresponse = requests.post(endpoint, headers=headers, files=files, params=params)\nprint(response.json())\n"))),Object(i.b)(l.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -F 'file=shapefile.zip' \\\n    'https://api.withleaf.io/services/operations/api/files?' \\\n    'fileFormat=SHAPEFILE&provider=JohnDeere&leafUserId=id'\n"))),Object(i.b)(l.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a single JSON object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "message": "Your file is being processed and will be available in a few minutes",\n  "ids": ["id1", "id"]\n}\n')))),Object(i.b)("p",null,"After a few minutes, you can consult the result of Leaf processing over this file by\nperforming GET consults in this."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"merge-files"},"Merge files"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--warning"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/files/merge")),Object(i.b)("p",null,"Posts a merge operation to our server."),Object(i.b)("p",null,"A merge operation is performed asynchronously. This call will return immediately\nwith the newly created file entry, but at this point, the file is not already\nprocessed and available. You will need to make a new ",Object(i.b)("inlineCode",{parentName:"p"},"GET /files")," request for the\nnew id and check the status. A status value of ",Object(i.b)("inlineCode",{parentName:"p"},"processed")," means the file is\ndone merging."),Object(i.b)("p",null,"A merge process has some validations, the files passed must belong to\nthe same ",Object(i.b)("inlineCode",{parentName:"p"},"leafUserId"),", be of the same operation type and have the status as ",Object(i.b)("inlineCode",{parentName:"p"},"processed"),".\nIf any of those filters fail, the endpoint will result in HTTP 400 error."),Object(i.b)("p",null,"It receives a single JSON object with the ",Object(i.b)("inlineCode",{parentName:"p"},"ids")," entry. Example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "ids": [ "id1", "id2", "so on" ]\n}\n')),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"json"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/operations/api/files/merge'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = { ids: [ 'id1', 'id2' ] }\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(l.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/operations/api/files/merge'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {'ids': ['id1', 'id2']}\n\nresponse = requests.post(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(i.b)(l.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ \"ids\": [ \"id1\", \"id2\" ] }'\n    'https://api.withleaf.io/services/operations/api/files/merge'\n"))),Object(i.b)(l.a,{value:"json",mdxType:"TabItem"},Object(i.b)("p",null,"  Returns a single JSON object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "id",\n  "status": "SENT_TO_MERGE"\n}\n')),Object(i.b)("p",null,"  After a few minutes, you can consult the result of Leaf processing over this file by\nperforming GET consults in this."))))}d.isMDXComponent=!0},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),c=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,m=p["".concat(s,".").concat(u)]||p[u]||d[u]||i;return n?r.a.createElement(m,l(l({ref:t},b),{},{components:n})):r.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var b=2;b<i;b++)s[b]=n[b];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";var a=n(0),r=n(20);t.a=function(){var e=Object(a.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},98:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},99:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return s}));var a=n(97),r=n(104);function i(){var e=Object(a.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var i=void 0===a?{}:a,s=i.forcePrependBaseUrl,l=void 0!==s&&s,o=i.absolute,b=void 0!==o&&o;if(!n)return n;if(n.startsWith("#"))return n;if(Object(r.b)(n))return n;if(l)return t+n;var c=!n.startsWith(t)?t+n.replace(/^\//,""):n;return b?e+c:c}(i,n,e,t)}}}function s(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}}}]);